<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummer.cloud.mapper.ext.ExtAccountMapper">
    <resultMap id="BaseResultMap" type="com.hummer.common.core.dto.AccountDTO"
               extends="com.hummer.cloud.mapper.AccountMapper.BaseResultMap">
        <result column="userName" property="userName"/>
        <result column="isProxy" property="isProxy"/>
        <result column="proxy_ip" jdbcType="VARCHAR" property="proxyIp" />
        <result column="proxy_port" jdbcType="VARCHAR" property="proxyPort" />
        <result column="proxy_name" jdbcType="VARCHAR" property="proxyName" />
        <result column="proxy_password" jdbcType="VARCHAR" property="proxyPassword" />
    </resultMap>

    <resultMap id="ServerResultMap" type="com.hummer.common.core.dto.ServerDTO"
               extends="com.hummer.cloud.mapper.AccountMapper.BaseResultMap">
        <result column="ip" property="ip"/>
        <result column="userName" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password" />
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.pluginId != null">
            and p1.id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and user.id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test='${condition}.ip != null'>
            and sg.ip
            <include refid="condition">
                <property name="object" value="${condition}.ip"/>
            </include>
        </if>
    </sql>

    <select id="getCloudAccountList" resultMap="BaseResultMap">
        select
        t.*,
        p.proxy_ip,
        p.proxy_port,
        p.proxy_name,
        p.proxy_password,
        user.name as userName,
        IF(p.proxy_ip, true, false) as isProxy
        from cloud_account as t
        left join user on t.creator = user.id
        left join proxy p on t.proxy_id = p.id
        LEFT JOIN plugin p1 on t.plugin_id = p1.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null and request.name != ''">
                and LOWER(t.name) like CONCAT('%', LOWER(#{request.name}),'%')
            </if>
            <if test="request.userName != null and request.userName != ''">
                and LOWER(user.name) like CONCAT('%', LOWER(#{request.userName}),'%')
            </if>
            <if test="request.status != null and request.status != ''">
                and t.status = #{request.status}
            </if>
            AND p1.type = 'cloud' or p1.type = 'native'
        </where>
        order by t.update_time desc
    </select>

    <select id="ruleList" parameterType="com.hummer.common.core.dto.QuartzTaskDTO"
            resultMap="com.hummer.cloud.mapper.ext.ExtRuleMapper.BaseResultMap2">
        SELECT
            t.id,
            t.name,
            t.status,
            t.severity,
            t.description,
            t.script,
            IFNULL (t1.`parameter`, t.`parameter`) as parameter,
            CASE WHEN t1.`parameter` IS NOT NULL
            THEN true
            ELSE false
            END AS isSaveParam,
            t.plugin_id as plugin_id,
            t.plugin_name as plugin_name,
            t.plugin_icon as plugin_icon,
            t.last_modified as last_modified,
            t.scan_type as scan_type,
            t1.regions
        FROM rule t
        <if test="accountId != null and accountId != ''">
            left join cloud_account account on account.plugin_id = t.plugin_id
        </if>
            LEFT JOIN rule_account_parameter t1 ON t.id = t1.rule_id
        <where>
            <if test="accountId != null">
                AND account.id = #{accountId}
            </if>
            <if test="pluginId != null">
                AND t.plugin_id = #{pluginId}
            </if>
            <if test="status != null">
                AND t.status = #{status}
            </if>
        </where>
        ORDER BY t.id desc
    </select>

    <select id="groupList" resultType="java.util.Map">
        SELECT
            IFNULL( sum( t4.return_sum ), 0 ) AS returnSum,
            IFNULL( sum( t4.resources_sum ), 0 ) AS resourcesSum,
            t.name,
            t.description
        FROM
            rule_group t
            LEFT JOIN rule_group_mapping t1 ON t.id = t1.group_id
            LEFT JOIN rule t2 ON t1.rule_id = t2.id
            LEFT JOIN resource_rule t3 ON t2.id = t3.rule_id
            LEFT JOIN resource t4 ON t3.resource_id = t4.id
            LEFT JOIN plugin p on t2.plugin_id = p.id
        <where>
            <if test="accountId != null">
                AND t4.account_id = #{accountId}
            </if>
            and p.type = 'cloud'
        </where>
        GROUP BY
            t.id
        ORDER BY
            returnSum desc
    </select>

    <select id="reportList" resultType="java.util.Map">
        SELECT
            t.*,
            IFNULL( sum( t4.return_sum ), 0 ) AS returnSum,
            IFNULL( sum( t4.resources_sum ), 0 ) AS resourcesSum,
            CASE
            WHEN
            (
            SELECT count(t5.id) FROM rule_inspection_report_mapping t1
            JOIN rule t2 ON t1.rule_id = t2.id
            JOIN resource_rule t3 ON t2.id = t3.rule_id
            JOIN resource t4 ON t3.resource_id = t4.id
            JOIN resource_item t5 ON t4.id = t5.resource_id
            LEFT JOIN plugin p on t2.plugin_id = p.id
            WHERE t1.report_id = t.id
            AND p.type = 'cloud'
            <if test="accountId != null">
                AND t4.account_id = #{accountId}
            </if>
            ) > 0 THEN 'risky'
            ELSE 'risk_free'
            END AS status
        FROM rule_inspection_report t
            LEFT JOIN rule_inspection_report_mapping t1 ON t.id = t1.report_id
            LEFT JOIN rule t2 ON t1.rule_id = t2.id
            LEFT JOIN resource_rule t3 ON t2.id = t3.rule_id
            LEFT JOIN resource t4 ON t3.resource_id = t4.id
            LEFT JOIN plugin p on t2.plugin_id = p.id
        <where>
            <if test="accountId != null">
                AND t4.account_id = #{accountId}
            </if>
            AND p.type = 'cloud'
        </where>
        GROUP BY
            t.id
        ORDER BY
            returnSum DESC
    </select>

    <select id="tagList" resultType="java.util.Map">
        SELECT
            IFNULL( sum( t4.return_sum ), 0 ) AS returnSum,
            IFNULL( sum( t4.resources_sum ), 0 ) AS resourcesSum,
            t.tag_key as tagKey,
            t.tag_name as tagName,
            t._index as `index`,
            t.flag
        FROM
            rule_tag t
            LEFT JOIN rule_tag_mapping t1 ON t.tag_key = t1.tag_key
            LEFT JOIN rule t2 ON t1.rule_id = t2.id
            LEFT JOIN resource_rule t3 ON t2.id = t3.rule_id
            LEFT JOIN resource t4 ON t3.resource_id = t4.id
            LEFT JOIN plugin p on t2.plugin_id = p.id
        <where>
            <if test="accountId != null">
                AND t4.account_id = #{accountId}
            </if>
            AND p.type = 'cloud'
        </where>
        GROUP BY
            t.tag_key
        ORDER BY
            returnSum DESC
    </select>

    <select id="regionsList" resultType="java.util.Map">
        SELECT
            IFNULL( sum(t3.return_sum), 0 ) AS returnSum,
            IFNULL( sum(t3.resources_sum), 0 ) AS resourcesSum,
            t1.region_name AS regionName,
            t1.region_id AS regionId,
            t1.account_label as accountName,
            t1.account_url as accountUrl
        FROM
            cloud_task t
            LEFT JOIN cloud_task_item t1 ON t.id = t1.task_id
            LEFT JOIN cloud_task_item_resource t2 ON t1.id = t2.task_item_id
            LEFT JOIN resource t3 ON t3.id = t2.resource_id
            LEFT JOIN plugin p on t.plugin_id = p.id
        <where>
            <if test="accountId != null">
                AND t1.account_id = #{accountId}
            </if>
            AND p.type = 'cloud'
        </where>
        GROUP BY
            t1.region_id, t1.region_name, t1.account_label, t1.account_url
    </select>

    <select id="resourceList" resultType="java.util.Map">
        SELECT
            t4.task_name as taskName,
            t4.type,
            t4.id as taskId,
            t4.apply_user as applyUser,
            t1.resource_type as resourceType,
            t.hummer_id as hummerId,
            t.plugin_name as pluginName,
            t.plugin_icon as pluginIcon,
            t.region_name as regionName,
            t.update_time as updateTime,
            t.id
        FROM resource_item t
            LEFT JOIN resource t1 ON t1.id = t.resource_id
            LEFT JOIN cloud_task_item_resource t2 ON t1.id = t2.resource_id
            LEFT JOIN cloud_task_item t3 ON t3.id = t2.task_item_id
            LEFT JOIN cloud_task t4 ON t3.task_id = t4.id
            LEFT JOIN plugin p on t1.plugin_id = p.id
        <where>
            <if test="accountId != null">
                AND t.account_id = #{accountId}
            </if>
            AND t4.task_name IS NOT NULL
            AND p.type = 'cloud'
        </where>
        ORDER BY t.create_time DESC
    </select>

    <select id="getServerList" resultMap="ServerResultMap">
        select
        t.*,
        sg.ip,
        sg.user_name as userName,
        sg.password,
        sg.server_group_id as groupId,
        sg.id as groupItemId,
        user.name as user
        from cloud_account as t
        left join plugin p1 on t.plugin_id = p1.id
        left join user on t.creator = user.id
        left join server_group_item sg on sg.server_id = t.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null and request.name != ''">
                and t.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.status != null and request.status != ''">
                and t.status = #{request.status}
            </if>
            <if test="request.groupId != null and request.groupId != ''">
                and sg.server_group_id = #{request.groupId}
            </if>
            and t.plugin_id = 'hummer-server-plugin'
        </where>
        order by t.update_time desc
    </select>

    <select id="historyList" resultType="java.util.Map">
        SELECT
        t5.resource_name as resourceName,
        t5.resource_status as resourceStatus,
        t5.resource_type as resourceType,
        t5.return_sum as returnSum,
        t5.resources_sum as resourcesSum,
        t5.plugin_name as pluginName,
        t5.plugin_icon as pluginIcon,
        t5.region_name as regionName,
        t5.severity as severity,
        t5.update_time as updateTime,
        t5.return_html as returnHtml,
        t5.resources as resources,
        t5.id as id
        FROM history_scan t
        JOIN history_scan_task t1 ON t.id = t1.scan_id
        JOIN cloud_task t2 ON t1.task_id = t2.id
        JOIN cloud_task_item t3 ON t3.task_id = t2.id
        JOIN cloud_task_item_resource t4 ON t3.id = t4.task_item_id
        JOIN resource t5 ON t4.resource_id = t5.id
        JOIN plugin p on t2.plugin_id = p.id
        <where>
            <if test="id != null">
                AND t.id = #{id}
            </if>
            AND p.type = 'cloud'
        </where>
        ORDER BY t5.create_time DESC
    </select>

    <select id="historyDiffList" resultType="java.util.Map">
        SELECT
        t5.resource_name as resourceName,
        t5.resource_status as resourceStatus,
        t5.resource_type as resourceType,
        t5.return_sum as returnSum,
        t5.resources_sum as resourcesSum,
        t5.plugin_name as pluginName,
        t5.plugin_icon as pluginIcon,
        t5.region_name as regionName,
        t5.severity as severity,
        t5.update_time as updateTime,
        t5.return_html as returnHtml,
        t5.resources as resources,
        t5.id as id
        FROM resource t5
        JOIN plugin p on t5.plugin_id = p.id
        <where>
            <if test="resourceName != null">
                AND t5.resource_name = #{resourceName}
            </if>
            <if test="resourceType != null">
                AND t5.resource_type = #{resourceType}
            </if>
            <if test="pluginName != null">
                AND t5.plugin_name = #{pluginName}
            </if>
            AND p.type = 'cloud'
        </where>
        ORDER BY t5.create_time DESC
    </select>

</mapper>
