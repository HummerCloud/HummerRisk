<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummer.cloud.mapper.ext.ExtOssMapper">
    <resultMap id="BaseResultMap" type="com.hummerrisk.oss.dto.OssDTO"
               extends="com.hummer.cloud.mapper.OssMapper.BaseResultMap">
        <result column="userName" property="userName"/>
        <result column="isProxy" property="isProxy"/>
        <result column="proxy_ip" jdbcType="VARCHAR" property="proxyIp" />
        <result column="proxy_port" jdbcType="VARCHAR" property="proxyPort" />
        <result column="proxy_name" jdbcType="VARCHAR" property="proxyName" />
        <result column="proxy_password" jdbcType="VARCHAR" property="proxyPassword" />
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.pluginId != null">
            and p1.id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and user.id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="ossList" resultMap="BaseResultMap" parameterType="com.hummerrisk.oss.controller.request.OssRequest">
        select
        t.*,
        p.proxy_ip,
        p.proxy_port,
        p.proxy_name,
        p.proxy_password,
        user.name as userName,
        IF(p.proxy_ip, true, false) as isProxy
        from oss as t
        left join user on t.creator = user.id
        left join proxy p on t.proxy_id = p.id
        LEFT JOIN plugin p1 on t.plugin_id = p1.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null and request.name != ''">
                and LOWER(t.name) like CONCAT('%', LOWER(#{request.name}),'%')
            </if>
            <if test="request.userName != null and request.userName != ''">
                and LOWER(user.name) like CONCAT('%', LOWER(#{request.userName}),'%')
            </if>
            <if test="request.status != null and request.status != ''">
                and t.status = #{request.status}
            </if>
            AND p1.type = 'cloud'
        </where>
        order by t.update_time desc
    </select>

    <sql id="combine2">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and t1.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.bucketName != null">
            and t.bucket_name
            <include refid="condition">
                <property name="object" value="${condition}.bucketName"/>
            </include>
        </if>
        <if test="${condition}.pluginId != null">
            and t1.plugin_id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
    </sql>

    <select id="ossBucketList" resultType="com.hummerrisk.oss.dto.OssBucketDTO">
        select
        t.*,
        t1.name as name,
        t1.plugin_id as pluginId,
        t1.plugin_icon as pluginIcon
        from oss_bucket as t
        left join oss t1 on t.oss_id = t1.id
        <where>
            <if test="request.combine != null">
                <include refid="combine2">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.ossId != null and request.ossId != ''">
                and t.oss_id = #{request.ossId}
            </if>
            <if test="request.name != null and request.name != ''">
                and LOWER(t1.name) like CONCAT('%', LOWER(#{request.name}),'%')
            </if>
            <if test="request.bucketName != null and request.bucketName != ''">
                and LOWER(t.bucket_name) like CONCAT('%', LOWER(#{request.bucketName}),'%')
            </if>
        </where>
        order by t.create_time desc
    </select>


    <sql id="combine3">
        <if test='${condition}.name != null'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test='${condition}.description != null'>
            and t.description
            <include refid="condition">
                <property name="object" value="${condition}.description"/>
            </include>
        </if>
        <if test='${condition}.level != null'>
            and t.level
            <include refid="condition">
                <property name="object" value="${condition}.level"/>
            </include>
        </if>
    </sql>

    <select id="ruleGroupList" resultType="com.hummer.common.core.dto.RuleGroupDTO">
        select
        t.*,
        (SELECT count(g.id) from rule_group_mapping g where g.group_id = t.id) as ruleSum,
        (
        SELECT count(g.id)
        FROM rule_group_mapping g
        WHERE g.group_id = t.id
        AND g.rule_id in (select tt.rule_id from cloud_task tt where tt.resources_sum &gt; 0 and tt.account_id = #{request.accountId})
        ) as riskRuleSum,
        p.name as pluginName,
        p.icon as pluginIcon,
        CASE
        WHEN
        (
        SELECT count(t5.id) FROM rule_group_mapping t1
        JOIN rule t2 ON t1.rule_id = t2.id
        JOIN resource_rule t3 ON t2.id = t3.rule_id
        JOIN resource t4 ON t4.id = t3.resource_id
        JOIN resource_item t5 ON t4.id = t5.resource_id
        WHERE t1.group_id = t.id
        AND t4.account_id = c.id
        ) > 0 THEN 'risky'
        ELSE 'risk_free'
        END AS status,
        (
        SELECT c1.create_time FROM cloud_task c1
        WHERE c1.account_id = c.id and c1.rule_id in (select r1.rule_id from rule_group_mapping r1 where r1.group_id = t.id)
        order by create_time desc limit 1) as createTime,
        '暂无合规报告' as state,
        (
        SELECT
        IFNULL(count( DISTINCT g.id ), 0)
        FROM
        rule_inspection_report r
        JOIN rule_inspection_report_mapping t1 ON t1.report_id = r.id
        JOIN cloud_task_item t2 ON t2.rule_id = t1.rule_id
        JOIN cloud_task t3 ON t3.id = t2.task_id
        JOIN rule_group_mapping t4 ON t3.rule_id = t4.rule_id
        JOIN rule_group g ON t4.group_id = g.id
        WHERE t3.account_id = c.id and g.id = t.id
        AND t3.return_sum > 0
        )
        AS riskyRegulation,
        (
        SELECT count( DISTINCT r.id ) FROM rule_inspection_report r
        ) AS totalRegulation,
        (
        SELECT
        IFNULL(sum( r.return_sum ), 0)
        FROM
        cloud_task r
        WHERE
        r.account_id = c.id
        AND r.rule_id IN (SELECT rule_id FROM rule_group_mapping WHERE group_id = t.id)
        )
        AS returnSum,
        (
        SELECT
        IFNULL(sum( r.resources_sum ), 0)
        FROM
        cloud_task r
        WHERE
        r.account_id = c.id
        AND r.rule_id IN (SELECT rule_id FROM rule_group_mapping WHERE group_id = t.id)
        )
        AS resourcesSum
        from rule_group as t
        join plugin p on t.plugin_id = p.id
        join cloud_account c on t.plugin_id = c.plugin_id
        <where>
            and t.level = '对象存储'
            <if test="request.combine != null">
                <include refid="combine3">
                    <property name="condition" value="request.combine"/>
                </include>
            </if>
            <if test="request.accountId != null and request.accountId != ''">
                and c.id = #{request.accountId}
            </if>
            <if test="request.name != null and request.name != ''">
                and LOWER(t.name) like concat('%', LOWER(#{request.name}), '%')
            </if>
            <if test="request.description != null and request.description != ''">
                and LOWER(t.description) like concat('%', LOWER(#{request.description}), '%')
            </if>
            <if test="request.pluginId != null and request.pluginId != ''">
                and t.plugin_id = #{request.pluginId}
            </if>
            and t.id in (select r.group_id from rule_group_mapping r join cloud_task ct on r.rule_id = ct.rule_id where ct.account_id = #{request.accountId})
        </where>
        order by `status`, createTime desc
    </select>

    <select id="searchGroupExportData" resultType="com.hummer.common.core.dto.ExportDTO" parameterType="java.lang.String">
        SELECT
            DISTINCT t.hummer_id as hummerId,
                     t.region_id as regionId,
                     t.region_name as regionName,
                     t1.resource_name as resourceName,
                     t.resource_type as resourceType,
                     t.severity,
                     t3.name as ruleName,
                     t3.description as ruleDescription,
                     IFNULL(t5.project, '暂无') as project,
                     IFNULL(t5.item_sort_first_level, '暂无') as firstLevel,
                     IFNULL(t5.item_sort_second_level, '暂无') as secondLevel,
                     IFNULL(t5.improvement, '暂无') as improvement
        FROM resource_item t
         JOIN resource t1 on t.resource_id = t1.id
         JOIN resource_rule t2 on t.resource_id = t2.resource_id
         JOIN rule t3 on t2.rule_id = t3.id
         JOIN rule_group_mapping g on t3.id = g.rule_id and g.group_id = #{groupId}
         JOIN rule_group rg on rg.id = g.group_id and rg.level = '对象存储'
         LEFT JOIN rule_inspection_report_mapping t4 on t3.id = t4.rule_id
         LEFT JOIN rule_inspection_report t5 on t4.report_id = t5.id
        WHERE t.account_id = #{accountId}
        ORDER BY t.resource_type, t1.resource_name, t.region_id, t.hummer_id
    </select>

    <sql id="resourceCombine">
        <if test='${condition}.name != null'>
            and t.hummer_id
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test='${condition}.ruleName != null'>
            and t6.name
            <include refid="condition">
                <property name="object" value="${condition}.ruleName"/>
            </include>
        </if>
        <if test='${condition}.severity != null'>
            and t.severity
            <include refid="condition">
                <property name="object" value="${condition}.severity"/>
            </include>
        </if>
        <if test='${condition}.applyUser != null'>
            and t4.applyUser
            <include refid="condition">
                <property name="object" value="${condition}.applyUser"/>
            </include>
        </if>
    </sql>

    <select id="resourceList" parameterType="com.hummer.common.core.domain.request.resource.ResourceRequest" resultType="com.hummer.common.core.dto.ResourceDTO">
        SELECT
        t4.task_name as taskName,
        t4.type,
        t4.id as taskId,
        t4.apply_user as applyUser,
        t5.rule_id as ruleId,
        t6.name as ruleName,
        t7.name as accountName,
        t6.suggestion,
        t.*
        FROM resource_item t
        JOIN resource t1 ON t1.id = t.resource_id
        JOIN cloud_task_item_resource t2 ON t1.id = t2.resource_id and t2.resource_type in
        <foreach collection="resourceTypes" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
        JOIN cloud_task_item t3 ON t3.id = t2.task_item_id
        JOIN cloud_task t4 ON t3.task_id = t4.id
        JOIN resource_rule t5 ON t1.id = t5.resource_id
        JOIN rule t6 ON t5.rule_id = t6.id
        JOIN cloud_account t7 ON t.account_id = t7.id
        <where>
            <if test="request.combine != null">
                <include refid="resourceCombine">
                    <property name="condition" value="request.combine"/>
                </include>
            </if>
            <if test="request.taskId != null">
                AND t4.id = #{request.taskId}
            </if>
            <if test="request.accountId != null">
                AND t.account_id = #{request.accountId}
            </if>
            <if test="request.regionId != null">
                AND t.region_id = #{request.regionId}
            </if>
            <if test="request.taskName != null">
                AND t4.task_name like CONCAT('%',#{request.taskName},'%')
            </if>
            <if test="request.severity != null">
                AND t.severity = #{request.severity}
            </if>
            <if test="request.tagKey != null">
                AND t5.rule_id in (select tt.rule_id from rule_tag_mapping tt where tt.tag_key = #{request.tagKey})
            </if>
            <if test="request.pluginName != null">
                AND t.plugin_name = #{request.pluginName}
            </if>
            <if test="request.resourceName != null">
                AND t.resource_name like CONCAT('%',#{request.resourceName},'%')
            </if>
            <if test="request.resourceStatus != null">
                AND t.resource_status = #{request.resourceStatus}
            </if>
            <if test="request.resourceType != null">
                AND t.resource_type = #{request.resourceType}
            </if>
            <if test="request.ruleId != null">
                AND t5.rule_id = #{request.ruleId}
            </if>
            <if test="request.ruleName != null">
                AND t6.name like CONCAT('%',#{request.ruleName},'%')
            </if>
            <if test="request.name != null">
                AND t.hummer_id like CONCAT('%',#{request.name},'%')
            </if>
        </where>
        ORDER BY t.create_time DESC
    </select>

    <select id="topInfo" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT *
        from (
              (SELECT IFNULL(count(*), 0) as accounts from oss) as accounts,
              (SELECT IFNULL(count(*), 0) as buckets from oss_bucket) as buckets,
              (SELECT IFNULL(sum(t.return_sum), 0) as HighRisk
                  from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join oss t3 on t2.account_id = t3.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
                  where t.severity = 'HighRisk'
              ) as HighRisk,
              (SELECT IFNULL(sum(t.return_sum), 0) as MediumRisk
                  from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join oss t3 on t2.account_id = t3.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
                  where t.severity = 'MediumRisk'
              ) as MediumRisk,
                  (SELECT IFNULL(sum(t.return_sum), 0) as LowRisk
                  from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join oss t3 on t2.account_id = t3.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
                  where t.severity = 'LowRisk'
              ) as LowRisk,
              (SELECT IFNULL(sum(t.return_sum), 0) as AllRisk
                  from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join oss t3 on t2.account_id = t3.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
              ) as AllRisk
                 )
    </select>

    <select id="ossChart" resultType="java.util.Map">
        SELECT
            concat(t.name, ' (', t.sum, ')') as 'name',
            t.sum as 'value'
        FROM oss as t
        ORDER BY t.update_time DESC
        Limit 10;
    </select>

    <select id="bucketChart" resultType="java.util.Map">
        SELECT
            concat(t.bucket_name, '(', IFNULL(t.object_number, 0), ')') as 'name',
            IFNULL(t.object_number, 0) as 'value'
        FROM oss_bucket as t
        ORDER BY t.create_time DESC
        Limit 10;
    </select>

    <select id="severityChart" resultType="java.util.Map">
        SELECT
            o.name as 'product',
            (SELECT IFNULL(sum(t.return_sum), 0) as HighRisk
             from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
             where t.severity = 'HighRisk' and t2.account_id = o.id
            ) as HighRisk,
            (SELECT IFNULL(sum(t.return_sum), 0) as MediumRisk
             from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
             where t.severity = 'MediumRisk' and t2.account_id = o.id
            ) as MediumRisk,
            (SELECT IFNULL(sum(t.return_sum), 0) as LowRisk
             from resource t
                  join cloud_task_item_resource t1 on t.id = t1.resource_id
                  join cloud_task t2 on t1.task_id = t2.id
                  join rule_group_mapping t4 on t2.rule_id = t4.rule_id
                  join rule_group t5 on t4.group_id = t5.id and t5.level = '对象存储'
             where t.severity = 'LowRisk' and t2.account_id = o.id
            ) as LowRisk
        FROM oss as o
        ORDER BY o.update_time DESC
        Limit 10;
    </select>

</mapper>
