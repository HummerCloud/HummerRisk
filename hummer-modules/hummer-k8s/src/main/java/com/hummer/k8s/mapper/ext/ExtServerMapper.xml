<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummer.k8s.mapper.ext.ExtServerMapper">

    <resultMap id="ServerResultMap" type="com.hummer.common.core.dto.ServerDTO"
               extends="com.hummer.k8s.mapper.ServerMapper.ResultMapWithBLOBs">
        <result column="user" property="user"/>
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and t.type
            <include refid="condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and user.id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test='${condition}.ip != null'>
            and t.ip
            <include refid="condition">
                <property name="object" value="${condition}.ip"/>
            </include>
        </if>
    </sql>

    <select id="getServerList" resultMap="ServerResultMap">
        select
        t.*,
        sg.id as groupId,
        sg.name as groupName,
        user.name as user
        from server as t
        left join user on t.creator = user.id
        left join server_group sg on sg.id = t.server_group_id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.id != null and request.id != ''">
                and t.id = #{request.id}
            </if>
            <if test="request.name != null and request.name != ''">
                and LOWER(t.name) like CONCAT('%', LOWER(#{request.name}),'%')
            </if>
            <if test="request.ip != null and request.ip != ''">
                and LOWER(t.ip) like CONCAT('%', LOWER(#{request.ip}),'%')
            </if>
            <if test="request.port != null and request.port != ''">
                and LOWER(t.port) like CONCAT('%', LOWER(#{request.port}),'%')
            </if>
            <if test="request.userName != null and request.userName != ''">
                and LOWER(t.user_name) like CONCAT('%', LOWER(#{request.userName}),'%')
            </if>
            <if test="request.status != null and request.status != ''">
                and t.status = #{request.status}
            </if>
            <if test="request.serverGroupId != null and request.serverGroupId != ''">
                and t.server_group_id = #{request.serverGroupId}
            </if>
        </where>
        order by t.update_time desc
    </select>

    <select id="topInfo" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT *
        from (
              (SELECT IFNULL(count(*), 0) as `groups` from server_group) as `groups`,
              (SELECT IFNULL(count(t.id), 0) as `servers` from server t) as `servers`,
              (SELECT IFNULL(count(t.id), 0) as `certificates` from server_certificate t) as `certificates`,
              (SELECT IFNULL(count(t.id), 0) as `high` from server_result t where LOWER(t.severity) = 'highrisk' and is_severity = 'false') as `high`,
              (SELECT IFNULL(count(t.id), 0) as `medium` from server_result t where LOWER(t.severity) = 'mediumrisk' and is_severity = 'false') as `medium`,
              (SELECT IFNULL(count(t.id), 0) as `low` from server_result t where LOWER(t.severity) = 'lowrisk' and is_severity = 'false') as `low`
        )
    </select>

</mapper>
