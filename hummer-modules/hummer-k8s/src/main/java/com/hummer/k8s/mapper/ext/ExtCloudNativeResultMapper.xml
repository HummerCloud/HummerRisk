<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummer.k8s.mapper.ext.ExtCloudNativeResultMapper">

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and u.id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test="${condition}.pluginId != null">
            and t1.plugin_id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
    </sql>

    <resultMap id="resultListBaseResultMap" type="com.hummer.common.core.dto.CloudNativeResultDTO">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="cloud_native_id" jdbcType="VARCHAR" property="cloudNativeId" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="plugin_icon" jdbcType="VARCHAR" property="pluginIcon" />
        <result column="result_status" jdbcType="VARCHAR" property="resultStatus" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="update_time" jdbcType="BIGINT" property="updateTime" />
        <result column="apply_user" jdbcType="VARCHAR" property="applyUser" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="return_sum" jdbcType="BIGINT" property="returnSum" />
        <result column="rule_id" jdbcType="VARCHAR" property="ruleId" />
        <result column="rule_name" jdbcType="VARCHAR" property="ruleName" />
        <result column="rule_desc" jdbcType="VARCHAR" property="ruleDesc" />
        <result column="severity" jdbcType="VARCHAR" property="severity" />
        <result column="critical" jdbcType="VARCHAR" property="critical" />
        <result column="high" jdbcType="VARCHAR" property="high" />
        <result column="medium" jdbcType="VARCHAR" property="medium" />
        <result column="low" jdbcType="VARCHAR" property="low" />
        <result column="unknown" jdbcType="VARCHAR" property="unknown" />
        <result column="configCritical" jdbcType="VARCHAR" property="configCritical" />
        <result column="configHigh" jdbcType="VARCHAR" property="configHigh" />
        <result column="configMedium" jdbcType="VARCHAR" property="configMedium" />
        <result column="configLow" jdbcType="VARCHAR" property="configLow" />
        <result column="configUnknown" jdbcType="VARCHAR" property="configUnknown" />
        <result column="fail" jdbcType="VARCHAR" property="fail" />
        <result column="info" jdbcType="VARCHAR" property="info" />
        <result column="pass" jdbcType="VARCHAR" property="pass" />
        <result column="return_config_sum" jdbcType="BIGINT" property="returnConfigSum" />
        <result column="vulnerability_report" jdbcType="LONGVARCHAR" property="vulnerabilityReport" />
        <result column="config_audit_report" jdbcType="LONGVARCHAR" property="configAuditReport" />
        <result column="kube_bench" jdbcType="LONGVARCHAR" property="kubeBench" />
        <result column="cloud_resources_sum" jdbcType="BIGINT" property="cloudResourcesSum" />
        <result column="cloud_return_sum" jdbcType="BIGINT" property="cloudReturnSum" />
    </resultMap>

    <select id="resultList" parameterType="com.hummer.common.core.domain.request.k8s.K8sResultRequest" resultMap="resultListBaseResultMap">
        SELECT
        t.*,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'critical') as `critical`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'high') as `high`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'medium') as `medium`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'low') as `low`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'unknown') as `unknown`,
        (select count(tj.id) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'critical') as `configCritical`,
        (select count(tj.id) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'high') as `configHigh`,
        (select count(tj.id) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'medium') as `configMedium`,
        (select count(tj.id) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'low') as `configLow`,
        (select count(tj.id) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'unknown') as `configUnknown`,
        (select count(tj.id) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'fail') as `fail`,
        (select count(tj.id) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'warn') as `warn`,
        (select count(tj.id) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'info') as `info`,
        (select count(tj.id) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'pass') as `pass`
        FROM cloud_native_result t
        left join user u on t.apply_user = u.id
        left join cloud_native t1 on t1.id = t.cloud_native_id
        <where>
            <if test="combine != null">
                <include refid="combine">
                    <property name="condition" value="combine"/>
                </include>
            </if>
            <if test="id != null and id != ''">
                AND t.id = #{id}
            </if>
            <if test="name != null and name != ''">
                AND LOWER(t.name) like CONCAT('%',#{name},'%')
            </if>
            <if test="userName != null and userName != ''">
                AND LOWER(u.name) like CONCAT('%',#{userName},'%')
            </if>
        </where>
        ORDER BY t.update_time desc
    </select>

    <sql id="combine2">
        <if test='${condition}.pluginId != null'>
            and t1.plugin_id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
    </sql>

    <resultMap id="syncListBaseResultMap" type="com.hummer.common.core.dto.CloudNativeSourceSyncLogWithBLOBsDTO">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="cloud_native_id" jdbcType="VARCHAR" property="cloudNativeId" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="operator" jdbcType="VARCHAR" property="operator" />
        <result column="sum" jdbcType="BIGINT" property="sum" />
        <result column="result" jdbcType="BIT" property="result" />
        <result column="operation" jdbcType="LONGVARCHAR" property="operation" />
        <result column="output" jdbcType="LONGVARCHAR" property="output" />
    </resultMap>

    <select id="syncList" resultMap="syncListBaseResultMap">
        SELECT
        t.*,
        t1.name as k8sName,
        t1.plugin_icon as pluginIcon
        FROM cloud_native_source_sync_log t
        LEFT JOIN cloud_native t1 on t.cloud_native_id = t1.id
        <where>
            <if test="request.combine != null">
                <include refid="combine2">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.id != null and request.id != ''">
                and t.id = #{request.id}
            </if>
            <if test="request.k8sName != null and request.k8sName != ''">
                and LOWER(t1.name) like CONCAT('%', LOWER(#{request.k8sName}),'%')
            </if>
            <if test="request.operator != null and request.operator != ''">
                and LOWER(t.operator) like CONCAT('%', LOWER(#{request.operator}),'%')
            </if>
        </where>
        ORDER BY t.create_time desc
    </select>

    <resultMap id="ImageMap" type="com.hummer.common.core.dto.ImageDTO" extends="com.hummer.k8s.mapper.ImageMapper.BaseResultMap">
        <result column="user" property="user"/>
        <result column="imageRepoName" property="imageRepoName"/>
    </resultMap>

    <sql id="combine3">
        <if test='${condition}.name != null'>
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and u.id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test="${condition}.pluginId != null">
            and t1.plugin_id
            <include refid="condition">
                <property name="object" value="${condition}.pluginId"/>
            </include>
        </if>
    </sql>

    <select id="imageList" resultMap="ImageMap">
        select
        t.*,
        r.name as imageRepoName,
        u.name as userName
        from image as t
        left join image_repo r on t.repo_id = r.id
        left join user u on t.creator = u.id
        <where>
            <if test="request.combine != null">
                <include refid="combine3">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.id != null and request.id != ''">
                and t.id = #{request.id}
            </if>
            <if test="request.name != null and request.name != ''">
                and t.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.status != null and request.status != ''">
                and t.status = #{request.status}
            </if>
        </where>
        order by t.update_time desc
    </select>

    <select id="metricChart" resultType="com.hummer.common.core.dto.MetricChartDTO" parameterType="java.lang.String">
        SELECT *
        from (
             (SELECT count(*) as critical FROM cloud_native_result_item t WHERE LOWER(t.severity) = 'critical' AND t.result_id = #{resultId}) as `critical`,
             (SELECT count(*) as high FROM cloud_native_result_item t WHERE LOWER(t.severity) = 'high' AND t.result_id = #{resultId}) as `high`,
             (SELECT count(*) as medium FROM cloud_native_result_item t WHERE LOWER(t.severity) = 'medium' AND t.result_id = #{resultId}) as `medium`,
             (SELECT count(*) as low FROM cloud_native_result_item t WHERE LOWER(t.severity) = 'low' AND t.result_id = #{resultId}) as `low`,
             (SELECT count(*) as unknown FROM cloud_native_result_item t WHERE LOWER(t.severity) = 'unknown' AND t.result_id = #{resultId}) as `unknown`,
             (SELECT count(*) as total FROM cloud_native_result_item t WHERE t.result_id = #{resultId}) as `total`
         )
    </select>

    <select id="metricConfigChart" resultType="com.hummer.common.core.dto.MetricChartDTO" parameterType="java.lang.String">
        SELECT *
        from (
             (SELECT count(*) as critical FROM cloud_native_result_config_item t WHERE LOWER(t.severity) = 'critical' AND t.result_id = #{resultId}) as `critical`,
             (SELECT count(*) as high FROM cloud_native_result_config_item t WHERE LOWER(t.severity) = 'high' AND t.result_id = #{resultId}) as `high`,
             (SELECT count(*) as medium FROM cloud_native_result_config_item t WHERE LOWER(t.severity) = 'medium' AND t.result_id = #{resultId}) as `medium`,
             (SELECT count(*) as low FROM cloud_native_result_config_item t WHERE LOWER(t.severity) = 'low' AND t.result_id = #{resultId}) as `low`,
             (SELECT count(*) as unknown FROM cloud_native_result_config_item t WHERE LOWER(t.severity) = 'unknown' AND t.result_id = #{resultId}) as `unknown`,
             (SELECT count(*) as total FROM cloud_native_result_config_item t WHERE t.result_id = #{resultId}) as `total`
         )
    </select>

    <select id="kubenchChart" resultType="com.hummer.common.core.dto.KubenchChartDTO" parameterType="java.lang.String">
        SELECT *
        from (
             (SELECT count(*) as fail FROM cloud_native_result_kubench t WHERE LOWER(t.severity) = 'fail' AND t.result_id = #{resultId}) as fail,
             (SELECT count(*) as warn FROM cloud_native_result_kubench t WHERE LOWER(t.severity) = 'warn' AND t.result_id = #{resultId}) as warn,
             (SELECT count(*) as info FROM cloud_native_result_kubench t WHERE LOWER(t.severity) = 'info' AND t.result_id = #{resultId}) as info,
             (SELECT count(*) as pass FROM cloud_native_result_kubench t WHERE LOWER(t.severity) = 'pass' AND t.result_id = #{resultId}) as pass,
             (SELECT count(*) as total FROM cloud_native_result_kubench t WHERE t.result_id = #{resultId}) as total
         )
    </select>

    <select id="getCloudNativeResult" parameterType="java.lang.String" resultMap="resultListBaseResultMap">
        SELECT
        t.*,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'critical') as `critical`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'high') as `high`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'medium') as `medium`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'low') as `low`,
        (select count(*) from cloud_native_result_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'unknown') as `unknown`,
        (select count(*) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'critical') as `configCritical`,
        (select count(*) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'high') as `configHigh`,
        (select count(*) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'medium') as `configMedium`,
        (select count(*) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'low') as `configLow`,
        (select count(*) from cloud_native_result_config_item tj where tj.result_id = t.id and LOWER(tj.severity) = 'unknown') as `configUnknown`,
        (select count(*) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'fail') as `fail`,
        (select count(*) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'warn') as `warn`,
        (select count(*) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'info') as `info`,
        (select count(*) from cloud_native_result_kubench tj where tj.result_id = t.id and LOWER(tj.severity) = 'pass') as `pass`
        FROM cloud_native_result t
        <where>
            <if test="resultId != null">
                AND t.id = #{resultId}
            </if>
        </where>
    </select>

</mapper>
