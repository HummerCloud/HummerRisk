<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummer.k8s.mapper.ext.ExtCloudNativeSourceMapper">

    <resultMap id="BaseResultMap" type="com.hummer.common.core.dto.CloudNativeSourceDTO"
               extends="com.hummer.k8s.mapper.CloudNativeSourceMapper.ResultMapWithBLOBs">
        <result column="userName" property="userName"/>
        <result column="cloudNativeName" jdbcType="VARCHAR" property="cloudNativeName" />
        <result column="pluginIcon" jdbcType="VARCHAR" property="pluginIcon" />
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.sourceName != null and (${name} == null or ${name} == "")'>
            and t.source_name
            <include refid="condition">
                <property name="object" value="${condition}.sourceName"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.sourceNamespace != null">
            and t.source_namespace
            <include refid="condition">
                <property name="object" value="${condition}.sourceNamespace"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.sourceType != null">
            and t.source_type
            <include refid="condition">
                <property name="object" value="${condition}.sourceType"/>
            </include>
        </if>
        <if test="${condition}.cloudNativeId != null">
            and t.cloud_native_id
            <include refid="condition">
                <property name="object" value="${condition}.cloudNativeId"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and t.creator
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="getCloudNativeSourceList" resultMap="BaseResultMap">
        select
        t.*,
        t1.plugin_icon as pluginIcon,
        t1.name as cloudNativeName,
        t2.name as userName
        FROM cloud_native_source as t
        LEFT JOIN cloud_native t1 ON t.cloud_native_id = t1.id
        LEFT JOIN user t2 ON t1.creator = t2.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.cloudNativeName != null and request.cloudNativeName != ''">
                and LOWER(t1.name) like CONCAT('%', LOWER(#{request.cloudNativeName}),'%')
            </if>
            <if test="request.userName != null and request.userName != ''">
                and LOWER(t2.name) like CONCAT('%', LOWER(#{request.userName}),'%')
            </if>
            <if test="request.sourceName != null and request.sourceName != ''">
                and LOWER(t.source_name) like CONCAT('%', LOWER(#{request.sourceName}),'%')
            </if>
            <if test="request.sourceNamespace != null and request.sourceNamespace != ''">
                and LOWER(t.source_namespace) like CONCAT('%', LOWER(#{request.sourceNamespace}),'%')
            </if>
            <if test="request.sourceType != null and request.sourceType != ''">
                and LOWER(t.source_type) like CONCAT('%', LOWER(#{request.sourceType}),'%')
            </if>
            <if test="request.cloudNativeId != null and request.cloudNativeId != ''">
                and t.cloud_native_id = #{request.cloudNativeId}
            </if>
        </where>
        order by t.update_time desc
    </select>

    <select id="situationInfo" parameterType="java.util.Map" resultType="com.hummer.common.core.dto.SituationDTO">
        SELECT *
        from (
                (
                SELECT IFNULL(count(t.id), 0) as namespaces
                from cloud_native_source t
                where t.source_type = 'Namespace'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as namespaces,
                (
                SELECT IFNULL(count(t.id), 0) as pods
                from cloud_native_source t
                where t.source_type = 'Pod'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pods,
                (
                SELECT IFNULL(count(t.id), 0) as nodes
                from cloud_native_source t
                where t.source_type = 'Node'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as nodes,
                (
                SELECT IFNULL(count(t.id), 0) as deployments
                from cloud_native_source t
                where t.source_type = 'Deployment'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as deployments,
                (
                SELECT IFNULL(count(t.id), 0) as daemonsets
                from cloud_native_source t
                where t.source_type = 'Daemonset'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as daemonsets,
                (
                SELECT IFNULL(count(t.id), 0) as serviceAccounts
                from cloud_native_source t
                where t.source_type = 'ServiceAccount'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as serviceAccounts,
                (
                SELECT IFNULL(count(t.id), 0) as services
                from cloud_native_source t
                where t.source_type = 'Service'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as services,
                (
                SELECT IFNULL(count(t.id), 0) as ingress
                from cloud_native_source t
                where t.source_type = 'Ingress'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as ingress,
                (
                SELECT IFNULL(count(t.id), 0) as roles
                from cloud_native_source t
                where t.source_type = 'Role'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as roles,
                (
                SELECT IFNULL(count(t.id), 0) as roleBindings
                from cloud_native_source t
                where t.source_type = 'RoleBinding'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as roleBindings,
                (
                SELECT IFNULL(count(t.id), 0) as clusterRoles
                from cloud_native_source t
                where t.source_type = 'ClusterRole'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as clusterRoles,
                (
                SELECT IFNULL(count(t.id), 0) as clusterRoleBindings
                from cloud_native_source t
                where t.source_type = 'ClusterRoleBinding'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as clusterRoleBindings,
                (
                SELECT IFNULL(count(t.id), 0) as secrets
                from cloud_native_source t
                where t.source_type = 'Secret'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as secrets,
                (
                SELECT IFNULL(count(t.id), 0) as configmaps
                from cloud_native_source t
                where t.source_type = 'Configmap'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as configmaps,
                (
                SELECT IFNULL(count(t.id), 0) as statefulSets
                from cloud_native_source t
                where t.source_type = 'StatefulSet'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as statefulSets,
                (
                SELECT IFNULL(count(t.id), 0) as replicaSets
                from cloud_native_source t
                where t.source_type = 'ReplicaSet'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as replicaSets,
                (
                SELECT IFNULL(count(t.id), 0) as cronJobs
                from cloud_native_source t
                where t.source_type = 'CronJob'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as cronJobs,
                (
                SELECT IFNULL(count(t.id), 0) as jobs
                from cloud_native_source t
                where t.source_type = 'Job'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as jobs,
                (
                SELECT IFNULL(count(t.id), 0) as pvs
                from cloud_native_source t
                where t.source_type = 'PV'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pvs,
                (
                SELECT IFNULL(count(t.id), 0) as pvcs
                from cloud_native_source t
                where t.source_type = 'PVC'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pvcs,
                (
                SELECT IFNULL(count(t.id), 0) as leases
                from cloud_native_source t
                where t.source_type = 'Lease'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as leases,
                (
                SELECT IFNULL(count(t.id), 0) as endpointSlices
                from cloud_native_source t
                where t.source_type = 'EndpointSlice'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as endpointSlices,
                (
                SELECT IFNULL(count(t.id), 0) as events
                from cloud_native_source t
                where t.source_type = 'Event'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as events,
                (
                SELECT IFNULL(count(t.id), 0) as networkPolicies
                from cloud_native_source t
                where t.source_type = 'NetworkPolicy'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as networkPolicies,
                (
                SELECT IFNULL(count(t.id), 0) as versions
                from cloud_native_source t
                where t.source_type = 'Version'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as versions
             )
    </select>

    <resultMap id="D3BaseResultMap" type="com.hummer.common.core.domain.request.k8s.K8sTopology">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.K8s" javaType="list" select="selectK8s" column="name">
        </collection>
    </resultMap>

    <resultMap id="K8sBaseResultMap" type="com.hummer.common.core.domain.request.k8s.K8s">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.ResourceType" javaType="list"
                    select="selectResourceType" column="k8sId">
        </collection>
    </resultMap>

    <resultMap id="ResourceTypeBaseResultMap" type="com.hummer.common.core.domain.request.k8s.ResourceType">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="resourceType" jdbcType="VARCHAR" property="resourceType" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.Resource" javaType="list"
                    select="selectResource" column="{k8sId=k8sId, resourceType=resourceType}">
            <result column="name" jdbcType="VARCHAR" property="name" />
            <result column="value" jdbcType="INTEGER" property="value" />
        </collection>
    </resultMap>

    <select id="k8sTopology" resultMap="D3BaseResultMap">
        select 'K8s' as name
    </select>

    <select id="selectK8s" resultMap="K8sBaseResultMap">
        select
            CONCAT('K8s账号: \r', t.name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.id and t1.source_type in ('Namespace', 'Pod', 'Node', 'Deployment', 'Service')
                   ), ' 个资源)'
                ) as name,
            t.id as k8sId
        from cloud_native t
        where t.status != 'INVALID'
    </select>

    <select id="selectResourceType" resultMap="ResourceTypeBaseResultMap">
        select
            CONCAT('资源类型: \r', t.source_type, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.cloud_native_id and t1.source_type = t.source_type
                   ), ' 个资源)'
                ) as name,
            t.cloud_native_id as k8sId,
            t.source_type as resourceType
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_type in ('Namespace', 'Pod', 'Node', 'Deployment', 'Service')
        group by t.source_type, t.cloud_native_id
    </select>

    <select id="selectResource" resultType="com.hummer.common.core.domain.request.sync.Resource">
        select
            CASE
                WHEN t.source_namespace IS NULL
                    THEN CONCAT(t.source_name)
                ELSE CONCAT(t.source_name)
                END AS name,
            t.source_namespace as namespace,
            CASE
                WHEN t.source_namespace IS NULL
                    THEN 2
                ELSE 1
                END AS value
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_type = #{resourceType} and t.source_type in ('Namespace', 'Pod', 'Node', 'Deployment', 'Service')
    </select>


    <resultMap id="NodeBaseResultMap" type="com.hummer.common.core.domain.request.k8s.NodeTopology">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.K8sResource" javaType="list" select="selectK8sResource" column="name">
        </collection>
    </resultMap>

    <resultMap id="K8sResourceBaseResultMap" type="com.hummer.common.core.domain.request.k8s.K8sResource">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.Node" javaType="list"
                    select="selectNode" column="k8sId">
        </collection>
    </resultMap>

    <resultMap id="K8sNodeBaseResultMap" type="com.hummer.common.core.domain.request.k8s.Node">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="nodeId" jdbcType="VARCHAR" property="nodeId" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.Pod" javaType="list"
                    select="selectPod" column="{k8sId=k8sId, nodeId=nodeId}">
            <result column="name" jdbcType="VARCHAR" property="name" />
            <result column="value" jdbcType="INTEGER" property="value" />
        </collection>
    </resultMap>

    <select id="nodeTopology" resultMap="NodeBaseResultMap">
        select 'K8s' as name
    </select>

    <select id="selectK8sResource" resultMap="K8sResourceBaseResultMap">
        select
            CONCAT('K8s账号: \r', t.name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.id and t1.source_type = 'Node'
                   ), ' 个Node)'
                ) as name,
            t.id as k8sId
        from cloud_native t
        where t.status != 'INVALID'
    </select>

    <select id="selectNode" resultMap="K8sNodeBaseResultMap">
        select
            CONCAT('Node: \r', t.source_name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.cloud_native_id and t1.source_type = 'Pod'
                   ), ' 个Pod)'
                ) as name,
            t.cloud_native_id as k8sId,
            t.source_name as nodeId
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_type = 'Node'
    </select>


    <select id="selectPod" resultType="com.hummer.common.core.domain.request.k8s.Pod">
        select
            CASE
                WHEN t.source_namespace IS NULL
                    THEN CONCAT(t.source_name)
                ELSE CONCAT(t.source_name)
                END AS name,
            t.source_namespace as namespace,
            CASE
                WHEN t.source_namespace IS NULL
                    THEN 2
                ELSE 1
                END AS value
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_node = #{nodeId} and t.source_type = 'Pod'
    </select>

    <resultMap id="NameSpaceBaseResultMap" type="com.hummer.common.core.domain.request.k8s.NameSpaceTopology">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.K8sNameSpace" javaType="list" select="selectK8sNameSpace" column="name">
        </collection>
    </resultMap>

    <resultMap id="K8sNameSpaceBaseResultMap" type="com.hummer.common.core.domain.request.k8s.K8sNameSpace">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.NameSpace" javaType="list"
                    select="selectNameSpace" column="k8sId">
        </collection>
    </resultMap>

    <resultMap id="NameSpaceResultMap" type="com.hummer.common.core.domain.request.k8s.NameSpace">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="namespaceId" jdbcType="VARCHAR" property="namespaceId" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.Resource" javaType="list"
                    select="selectNSResource" column="{k8sId=k8sId, namespaceId=namespaceId}">
            <result column="name" jdbcType="VARCHAR" property="name" />
            <result column="value" jdbcType="INTEGER" property="value" />
        </collection>
    </resultMap>

    <select id="namespaceTopology" resultMap="NameSpaceBaseResultMap">
        select 'K8s' as name
    </select>

    <select id="selectK8sNameSpace" resultMap="K8sNameSpaceBaseResultMap">
        select
            CONCAT('K8s账号: \r', t.name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.id and t1.source_type = 'Namespace'
                   ), ' 个NameSpace)'
                ) as name,
            t.id as k8sId
        from cloud_native t
        where t.status != 'INVALID'
    </select>

    <select id="selectNameSpace" resultMap="NameSpaceResultMap">
        select
            CONCAT('NameSpace: \r', t.source_name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.cloud_native_id and t1.source_namespace = t.source_name
                         and t1.source_type in ('Namespace', 'Pod', 'Node', 'Deployment', 'Service')
                   ), ' 个资源)'
                ) as name,
            t.cloud_native_id as k8sId,
            t.source_name as namespaceId
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_type = 'Namespace'
    </select>

    <select id="selectNSResource" resultType="com.hummer.common.core.domain.request.k8s.Resource">
        select
            CONCAT(t.source_name, '(', t.source_type, ')') AS name,
            1 AS value
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_namespace = #{namespaceId} and t.source_type in ('Namespace', 'Pod', 'Node', 'Deployment', 'Service')
    </select>

    <resultMap id="D3BaseRiskResultMap" type="com.hummer.common.core.domain.request.k8s.RiskTopology">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="riskType" jdbcType="VARCHAR" property="riskType" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.NameSpace" javaType="list" select="selectRiskNameSpace"
                    column="{k8sId=k8sId, riskType=riskType}">
        </collection>
    </resultMap>

    <resultMap id="NameSpaceBaseRiskResultMap" type="com.hummer.common.core.domain.request.k8s.NameSpace">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="namespaceId" jdbcType="VARCHAR" property="namespaceId" />
        <result column="riskType" jdbcType="VARCHAR" property="riskType" />
        <collection property="children" ofType="com.hummer.common.core.domain.request.k8s.Resource" javaType="list"
                    select="selectRiskResource" column="{k8sId=k8sId, namespaceId=namespaceId, riskType=riskType}">
            <result column="name" jdbcType="VARCHAR" property="name" />
            <result column="value" jdbcType="INTEGER" property="value" />
            <result column="risk" jdbcType="INTEGER" property="risk" />
            <result column="severity" jdbcType="INTEGER" property="severity" />
        </collection>
    </resultMap>

    <select id="riskTopology" resultMap="D3BaseRiskResultMap" parameterType="java.lang.String">
        select
            #{request.accountId} as name,
            #{request.accountId} as k8sId,
            #{request.risk} as riskType
    </select>

    <select id="selectRiskNameSpace" resultMap="NameSpaceBaseRiskResultMap">
        select
            CONCAT('NameSpace: \r', t.source_name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.cloud_native_id
                         and t1.source_namespace = t.source_namespace
                         and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
                   ), ' 个资源)'
                ) as name,
            t.cloud_native_id as k8sId,
            t.source_name as namespaceId,
            #{riskType} as riskType
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId}
          and t.source_type = 'Namespace'
            <if test="riskType != null and riskType != ''">
                and t.source_namespace in (select distinct(t1.source_namespace) from cloud_native_source_image i
                join cloud_native_source t1 on i.source_id = t1.id and t1.cloud_native_id = #{k8sId}
                join cloud_native_result t2 on t1.cloud_native_id = t2.cloud_native_id
                join cloud_native_result_item t3 on t2.id = t3.result_id and i.image = t3.image
                where LOWER(t3.severity) = #{riskType})
            </if>
          and (
            select count(t1.id) from cloud_native_source t1
            where t1.cloud_native_id = t.cloud_native_id
              and t1.source_namespace = t.source_namespace
              and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
            ) &gt; 0
    </select>

    <select id="selectRiskResource" resultType="com.hummer.common.core.domain.request.k8s.Resource">
        select
            CONCAT(t.source_name, '(', t.source_type, ')') AS name,
            (select count(i.id) from cloud_native_source_image i where t.id = i.source_id) AS value,
            (
            select count(t3.id)
            from cloud_native_source_image i
            left join cloud_native_source t1 on i.source_id = t1.id
            left join cloud_native_result t2 on t1.cloud_native_id = t2.cloud_native_id
            left join cloud_native_result_item t3 on t2.id = t3.result_id and i.image like concat('%', t3.image,'%')
            where t.id = i.source_id ) AS risk,
             CASE
                WHEN 'CRITICAL' IN
                    (select t3.severity
                    from cloud_native_source_image i
                    left join cloud_native_result_item t3 on i.image like concat('%', t3.image,'%')
                    left join cloud_native_result t2 on t3.result_id = t2.id
                    where t.id = i.source_id and t.cloud_native_id = t2.cloud_native_id
                ) THEN 'critical'
                WHEN 'HIGH' IN
                    (select t3.severity
                    from cloud_native_source_image i
                    left join cloud_native_result_item t3 on i.image like concat('%', t3.image,'%')
                    left join cloud_native_result t2 on t3.result_id = t2.id
                    where t.id = i.source_id and t.cloud_native_id = t2.cloud_native_id
                ) THEN 'high'
                WHEN 'MEDIUM' IN
                    (select t3.severity
                    from cloud_native_source_image i
                    left join cloud_native_result_item t3 on i.image like concat('%', t3.image,'%')
                    left join cloud_native_result t2 on t3.result_id = t2.id
                    where t.id = i.source_id and t.cloud_native_id = t2.cloud_native_id
                ) THEN 'medium'
                WHEN 'LOW' IN
                    (select t3.severity
                    from cloud_native_source_image i
                    left join cloud_native_result_item t3 on i.image like concat('%', t3.image,'%')
                    left join cloud_native_result t2 on t3.result_id = t2.id
                    where t.id = i.source_id and t.cloud_native_id = t2.cloud_native_id
                ) THEN 'low'
                WHEN 'UNKNOWN' IN
                    (select t3.severity
                    from cloud_native_source_image i
                    left join cloud_native_result_item t3 on i.image like concat('%', t3.image,'%')
                    left join cloud_native_result t2 on t3.result_id = t2.id
                    where t.id = i.source_id and t.cloud_native_id = t2.cloud_native_id
                ) THEN 'unknown'
                ELSE 'no'
             END AS severity
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId}
        and t.source_namespace = #{namespaceId}
        <if test="riskType != null and riskType != ''">
            and t.id in (select t1.id from cloud_native_source_image i
            left join cloud_native_source t1 on i.source_id = t1.id
            left join cloud_native_result t2 on t1.cloud_native_id = t2.cloud_native_id
            left join cloud_native_result_item t3 on t2.id = t3.result_id and i.image = t3.image
            where t.id = i.source_id and LOWER(t3.severity) = #{riskType})
        </if>
        and t.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
    </select>

    <resultMap id="ImageRiskResultMap" type="com.hummer.common.core.domain.request.k8s.K8sImage">
        <result column="nameSpaces" jdbcType="INTEGER" property="nameSpaces" />
        <result column="images" jdbcType="INTEGER" property="images" />
        <result column="riskController" jdbcType="INTEGER" property="riskController" />
        <result column="controllers" jdbcType="INTEGER" property="controllers" />
        <result column="critical" jdbcType="INTEGER" property="critical" />
        <result column="high" jdbcType="INTEGER" property="high" />
        <result column="medium" jdbcType="INTEGER" property="medium" />
        <result column="low" jdbcType="INTEGER" property="low" />
        <result column="unknown" jdbcType="INTEGER" property="unknown" />
        <result column="k8sId" jdbcType="INTEGER" property="k8sId" />
        <collection property="nameSpaceImages" ofType="com.hummer.common.core.domain.request.k8s.NameSpaceImage" javaType="list" select="selectRiskNameSpaceImage" column="k8sId">
        </collection>
    </resultMap>

    <resultMap id="NameSpaceImageResultMap" type="com.hummer.common.core.domain.request.k8s.NameSpaceImage">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="source_id" jdbcType="VARCHAR" property="sourceId" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="image" jdbcType="VARCHAR" property="image" />
        <association property="cloudNativeSource" column="source_id" select="fromCloudNativeSource">
        </association>
        <collection property="cloudNativeResultItemList" ofType="com.hummer.common.core.domain.CloudNativeResultItem" javaType="list" select="fromCloudNativeResultItem" column="source_id">
        </collection>
    </resultMap>

    <select id="getImage" resultMap="ImageRiskResultMap">
        select * from
            (select IFNULL(count(t1.id), 0) as nameSpaces
            from cloud_native_source t1
            where t1.cloud_native_id = #{request.accountId}
              and t1.source_type = 'NameSpace'
              and (
                  select count(t2.id) from cloud_native_source t2
                  where t2.cloud_native_id = t1.cloud_native_id
                    and t2.source_namespace = t1.source_namespace
                    and t2.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
                  ) &gt; 0
            ) as nameSpaces,
            (select IFNULL(count(t1.id), 0) as images
             from cloud_native_source_image t1
             left join cloud_native_source t2 on t1.source_id = t2.id
             where t2.cloud_native_id = #{request.accountId}
               and t2.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
            ) as images,
            (select IFNULL(count(t1.id), 0) as controllers
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and (
                   select count(t2.id) from cloud_native_source t2
                   where t2.cloud_native_id = t1.cloud_native_id
                     and t2.source_namespace = t1.source_namespace
                     and t2.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               ) &gt; 0
            ) as controllers,
            (select IFNULL(count(t1.id), 0) as riskController
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and (
                       select count(t2.id) from cloud_native_source t2
                       where t2.cloud_native_id = t1.cloud_native_id
                         and t2.source_namespace = t1.source_namespace
                         and t2.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
                   ) &gt; 0
               and t1.id in
                   (select t3.source_id from cloud_native_source_image t3 join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%') join cloud_native_result t5 on t5.id = t4.result_id
                            where t5.cloud_native_id = t1.cloud_native_id)
            ) as riskController,
            (select IFNULL(count(t1.id), 0) as critical
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and t1.id in
                   (select
                       t3.source_id from cloud_native_source_image t3
                       join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%')
                       and LOWER(t4.severity) = 'critical'
                       join cloud_native_result t5 on t5.id = t4.result_id
                    where t5.cloud_native_id = t1.cloud_native_id and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob'))
            ) as critical,
            (select IFNULL(count(t1.id), 0) as high
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and t1.id in
                   (select
                        t3.source_id from cloud_native_source_image t3
                        join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%')
                        and LOWER(t4.severity) = 'high'
                        join cloud_native_result t5 on t5.id = t4.result_id
                    where t5.cloud_native_id = t1.cloud_native_id and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob'))
            ) as high,
            (select IFNULL(count(t1.id), 0) as medium
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and t1.id in
                   (select
                        t3.source_id from cloud_native_source_image t3
                        join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%')
                        and LOWER(t4.severity) = 'medium'
                        join cloud_native_result t5 on t5.id = t4.result_id
                    where t5.cloud_native_id = t1.cloud_native_id and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob'))
            ) as medium,
            (select IFNULL(count(t1.id), 0) as low
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and t1.id in
                   (select
                    t3.source_id from cloud_native_source_image t3
                    join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%')
                    and LOWER(t4.severity) = 'low'
                    join cloud_native_result t5 on t5.id = t4.result_id
                    where t5.cloud_native_id = t1.cloud_native_id and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob'))
            ) as low,
            (select IFNULL(count(t1.id), 0) as unknown
             from cloud_native_source t1
             where t1.cloud_native_id = #{request.accountId}
               and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob')
               and t1.id in
                 (select
                 t3.source_id from cloud_native_source_image t3
                 join cloud_native_result_item t4 on t4.image like concat('%', t3.image,'%')
                 and LOWER(t4.severity) = 'unknown'
                 join cloud_native_result t5 on t5.id = t4.result_id
                 where t5.cloud_native_id = t1.cloud_native_id and t1.source_type in ('DaemonSet', 'Deployment', 'StatefulSet', 'Pod', 'Job', 'CronJob'))
            ) as unknown,
             (select #{request.accountId} as k8sId) as k8sId
    </select>

    <select id="selectRiskNameSpaceImage" resultMap="NameSpaceImageResultMap">
        select t.*
        from cloud_native_source_image t
        join cloud_native_source t1 on t.source_id = t1.id
        where t1.cloud_native_id = #{k8sId}
    </select>

    <resultMap id="fromCloudNativeSourceBaseResultMap" type="com.hummer.common.core.domain.CloudNativeSource">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="cloud_native_id" jdbcType="VARCHAR" property="cloudNativeId" />
        <result column="source_name" jdbcType="VARCHAR" property="sourceName" />
        <result column="source_namespace" jdbcType="VARCHAR" property="sourceNamespace" />
        <result column="source_type" jdbcType="VARCHAR" property="sourceType" />
        <result column="source_node" jdbcType="VARCHAR" property="sourceNode" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="update_time" jdbcType="BIGINT" property="updateTime" />
        <result column="creator" jdbcType="VARCHAR" property="creator" />
    </resultMap>

    <select id="fromCloudNativeSource" resultMap="fromCloudNativeSourceBaseResultMap">
        select t.*
        from cloud_native_source t
        where t.id = #{source_id}
    </select>

    <resultMap id="fromCloudNativeResultItemBaseResultMap" type="com.hummer.common.core.domain.CloudNativeResultItem">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="result_id" jdbcType="VARCHAR" property="resultId" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="vulnerability_id" jdbcType="VARCHAR" property="vulnerabilityId" />
        <result column="severity" jdbcType="VARCHAR" property="severity" />
        <result column="score" jdbcType="VARCHAR" property="score" />
        <result column="target" jdbcType="VARCHAR" property="target" />
        <result column="primary_link" jdbcType="VARCHAR" property="primaryLink" />
        <result column="installed_version" jdbcType="VARCHAR" property="installedVersion" />
        <result column="fixed_version" jdbcType="VARCHAR" property="fixedVersion" />
        <result column="create_time" jdbcType="BIGINT" property="createTime" />
        <result column="resource" jdbcType="VARCHAR" property="resource" />
        <result column="image" jdbcType="VARCHAR" property="image" />
        <result column="links" jdbcType="LONGVARCHAR" property="links" />
    </resultMap>

    <select id="fromCloudNativeResultItem" resultMap="fromCloudNativeResultItemBaseResultMap">
        select t.*
        from cloud_native_result_item t
        join cloud_native_result t1 on t.result_id = t1.id
        join cloud_native_source t2 on t1.cloud_native_id = t2.cloud_native_id
        join cloud_native_source_image t3 on t3.source_id = t2.id and t.image like concat('%', t3.image,'%')
        where t3.source_id = #{source_id}
        ORDER BY FIELD(t.severity, 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN')
    </select>

</mapper>
