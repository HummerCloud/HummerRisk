
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('Linux Docker 最佳安全配置', '用于检测 Docker 的最佳安全配置,包括对 Docker image、Docker runtime、Dockerfile、Docker 服务的配置文件进行检测，从而提供 Docker 容器服务的安全性。', '最佳实践', 'hummer-server-plugin', 1, 'server', 1);

SELECT @groupId := LAST_INSERT_ID();

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d89105e6-f50a-461b-a9ab-349fa203c519', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('c735ca37-97a4-4e0d-b221-fe9895183dfc', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('6bbab13e-4758-4e2c-89f5-cba7accf2443', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d88f9ad4-2d52-43e1-abc3-3810a8d556d8', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('06b5de4c-996c-4f78-8e63-bde45d9311c6', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('15201ad2-7e26-433e-91bf-f13343ea6d1b', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('600a0f70-23a4-4895-a2a0-5f3653533a8c', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('75bcd461-c341-4431-b575-9f238a61f8b0', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('ae89205d-6baa-44b8-a8ea-e29c1a020ff8', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('0c1da51e-be72-4494-bc1d-c56346b20cad', @groupId);

INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('4c4e7dd9-cc8f-4384-8362-351ef0e0b7ab', '检测 Docker 容器是否挂载 root fs', 1, 'MediumRisk', '检测 Docker 容器是否挂载 root fs', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nfsroot_mount_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n read_status=$(docker inspect --format \'{{ .HostConfig.ReadonlyRootfs }}\' \"$c\")\n  if [ \"$read_status\" = \"false\" ]; then\n    #\n    if [ $fail -eq 0 ]; then\n     echo -e \"${RED}HummerError${NC}: 该容器挂载了 root FS,权限为 R/W: $c\"\n      fsroot_mount_containers=\"$fsroot_mount_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: 该容器挂载了 root FS,权限为 R/W: $c\"\n    fsroot_mount_containers=\"$fsroot_mount_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n# We went through all the containers and found no R/W FS mounts\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 容器根文件系统挂载正常！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('e0ef05e2-01e6-4c7a-90e9-130d3a5cf536', '检测 Docker 容器是否配置重启策略次数', 1, 'MediumRisk', '检测 Docker 容器是否配置重启策略次数', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nmaxretry_unset_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  policy=$(docker inspect --format MaximumRetryCount=\'{{ .HostConfig.RestartPolicy.MaximumRetryCount }}\' \"$c\")\n\n  if [ \"$policy\" != \"MaximumRetryCount=5\" ]; then\n    #\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: MaximumRetryCount 未设置为 5: $c\"\n      maxretry_unset_containers=\"$maxretry_unset_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: MaximumRetryCount 未设置为 5: $c\"\n    maxretry_unset_containers=\"$maxretry_unset_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: on-failure 重启策略配置正常！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('14a760fc-c8ba-45f6-93c2-0b1b6c7d406d', '检测 Docker 容器是否共享 PID 命名空间', 1, 'LowRisk', '检测 Docker 容器是否共享 PID 命名空间', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\npidns_shared_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  mode=$(docker inspect --format \'PidMode={{.HostConfig.PidMode }}\' \"$c\")\n\n  if [ \"$mode\" = \"PidMode=host\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: 该容器和主机的 Pid namespace 共享: $c\"\n      pidns_shared_containers=\"$pidns_shared_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: 该容器和主机的 Pid namespace 共享: $c\"\n    pidns_shared_containers=\"$pidns_shared_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n#遍历了所有容器，发现没有一个以 PidMode 作为主机\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到 PidMode 是 host 模式的容器！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('7e6e29ce-f333-4a6b-b450-9a16a738092a', '检测 Docker 容器是否配置内存限制', 1, 'HighRisk', '检测 Docker 容器是否配置内存限制', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nmem_unlimited_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  memory=$(docker inspect --format \'{{ .HostConfig.Memory }}\' \"$c\")\n  if docker inspect --format \'{{ .Config.Memory }}\' \"$c\" 2> /dev/null 1>&2; then\n    memory=$(docker inspect --format \'{{ .Config.Memory }}\' \"$c\")\n  fi\n\n  if [ \"$memory\" = \"0\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: 该容器未配置内存限制: $c\"\n      mem_unlimited_containers=\"$mem_unlimited_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: 该容器未配置内存限制: $c\"\n    mem_unlimited_containers=\"$mem_unlimited_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n# We went through all the containers and found no lack of Memory restrictions\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到没有配置内存限制的 Docker 容器！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('4e87e055-efc0-44f9-a45a-0f97a214c0db', '检测 Docker 容器是否共享 IPC 命名空间', 1, 'LowRisk', '检测 Docker 容器是否共享 IPC 命名空间', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nipcns_shared_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n    mode=$(docker inspect --format \'IpcMode={{.HostConfig.IpcMode }}\' \"$c\")\n\n    if [ \"$mode\" = \"IpcMode=host\" ]; then\n      #\n      if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}:  该容器共享了主机的 IPC namespace: $c\"\n        ipcns_shared_containers=\"$ipcns_shared_containers $c\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}:  该容器共享了主机的 IPC namespace: $c\"\n      ipcns_shared_containers=\"$ipcns_shared_containers $c\"\n    fi\n  done\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n#遍历了所有容器，发现没有一个以 PidMode 作为主机\nif [ $fail -eq 0 ]; then\n echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到共享主机 IPC namespace 的容器！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('2b9c642b-c872-4739-a816-f83551fcd1f9', '检测 Docker 容器是否共享主机网络', 1, 'LowRisk', '检测 Docker 容器是否共享主机网络', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nnet_host_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  mode=$(docker inspect --format \'NetworkMode={{ .HostConfig.NetworkMode }}\' \"$c\")\n\n  if [ \"$mode\" = \"NetworkMode=host\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e  \"${RED}HummerError${NC}: 该容器以 \'host\' 网络模式运行: $c\"\n      net_host_containers=\"$net_host_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e  \"${RED}HummerError${NC}: 该容器以 \'host\' 网络模式运行: $c\"\n    net_host_containers=\"$net_host_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n# We went through all the containers and found no Network Mode host\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到以 --net=host 模式运行的容器！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('9d88250c-7349-4b56-a7a3-4845aede47b8', '检测 Docker 容器是否绑定主机地址', 1, 'LowRisk', '检测 Docker 容器是否绑定主机地址', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nincoming_unbound_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  for ip in $(docker port \"$c\" | awk \'{print $3}\' | cut -d \':\' -f1); do\n    if [ \"$ip\" = \"0.0.0.0\" ]; then\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 容器 $c 绑定了主机通配符IP $ip,您应该将映射端口绑定到具体的 IP 地址上！\"\n        incoming_unbound_containers=\"$incoming_unbound_containers $c:$ip\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}: 容器 $c 绑定了主机通配符IP $ip,您应该将映射端口绑定到具体的 IP 地址上！\"\n      incoming_unbound_containers=\"$incoming_unbound_containers $c:$ip\"\n    fi\n  done\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n# We went through all the containers and found no ports bound to 0.0.0.0\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 容器端口绑定检测正常！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('678a6a33-1850-4ff8-a30e-96cbd5cc2c78', '检测 Docker 容器是否共享主机设备', 1, 'MediumRisk', '检测 Docker 容器是否共享主机设备', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nhostdev_exposed_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  devices=$(docker inspect --format \'Devices={{ .HostConfig.Devices }}\' \"$c\")\n\n  if [ \"$devices\" != \"Devices=\" ] && [ \"$devices\" != \"Devices=[]\" ] && [ \"$devices\" != \"Devices=\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: 该容器直接共享了主机设备: $c\"\n      hostdev_exposed_containers=\"$hostdev_exposed_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: 该容器直接共享了主机设备: $c\"\n    hostdev_exposed_containers=\"$hostdev_exposed_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测共享主机设备的 Docker 容器！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('93f9b65e-9a0e-403f-8a5c-9c0e2cd78cd8', '检测 Docker 容器是否配置 CPU 运行限制', 1, 'HighRisk', '检测 Docker 容器是否配置 CPU 运行限制', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\ncpu_unlimited_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  cpushares=$(docker inspect --format \'{{ .HostConfig.CpuShares }}\' \"$c\")\n  nanocpus=$(docker inspect --format \'{{ .HostConfig.NanoCpus }}\' \"$c\")\n\n  if docker inspect --format \'{{ .Config.CpuShares }}\' \"$c\" 2> /dev/null 1>&2; then\n    cpushares=$(docker inspect --format \'{{ .Config.CpuShares }}\' \"$c\")\n    nanocpus=$(docker inspect --format \'{{ .Config.NanoCpus }}\' \"$c\")\n  fi\n\n  if [ \"$cpushares\" = \"0\" ] && [ \"$nanocpus\" = \"0\" ]; then\n    #\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: 该容器运行不受CPU限制: $c\"\n      cpu_unlimited_containers=\"$cpu_unlimited_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}:  该容器运行不受CPU限制: $c\"\n    cpu_unlimited_containers=\"$cpu_unlimited_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 运行的容器已配置 CPU 限制！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('4125eb49-61a4-4f45-9640-491f9907ad93', '检测 Docker 容器是否只打开需要的端口', 1, 'CriticalRisk', '检测 Docker 容器是否只打开需要的端口', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nfail=0\nopen_port_containers=\"\"\nfor c in $(docker ps -qa); do\n  ports=$(docker port \"$c\" | awk \'{print $0}\' | cut -d \':\' -f2)\n\n  for port in $ports; do\n    if [ -n \"$port\" ]; then\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 确保容器上只打开需要的端口, Port in use: $port in $c\"\n        open_port_containers=\"$open_port_containers $c:$port\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}: 确保容器上只打开需要的端口, Port in use: $port in $c\"\n      open_port_containers=\"$open_port_containers $c:$port\"\n    fi\n  done\ndone\n\n# We went through all the containers and found none with open ports\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到端口映射\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', '检测 Docker 是否挂载敏感文件系统', 1, 'HighRisk', '检测 Docker 是否挂载敏感文件系统', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nsensitive_dirs=\'/\n/boot\n/dev\n/etc\n/lib\n/proc\n/sys\n/usr\'\nfail=0\nsensitive_mount_containers=\"\"\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n    volumes=$(docker inspect --format \'{{ .Mounts }}\' \"$c\")\n    if docker inspect --format \'{{ .VolumesRW }}\' \"$c\" 2>/dev/null 1>&2; then\n      volumes=$(docker inspect --format \'{{ .VolumesRW }}\' \"$c\")\n    fi\n    # Go over each directory in sensitive dir and see if they exist in the volumes\n    for v in $sensitive_dirs; do\n      sensitive=0\n      if echo \"$volumes\" | grep -e \"{.*\\s$v\\s.*true\\s.*}\" 2>/tmp/null 1>&2; then\n        sensitive=1\n      fi\n      if [ $sensitive -eq 1 ]; then\n        #\n        if [ $fail -eq 0 ]; then\n          echo -e \"${RED}HummerError${NC}: Sensitive directory $v mounted in: $c\"\n          fail=1\n          continue\n        fi\n        echo \"     * Sensitive directory $v mounted in: $c\"\n        sensitive_mount_containers=\"$sensitive_mount_containers $c:$v\"\n      fi\n  done\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n# We went through all the containers and found none with sensitive mounts\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保敏感的文件系统没有挂载到容器里面\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', '查看 Docker 容器是否以 root 运行', 1, 'MediumRisk', '查看 Docker 容器是否以 root 运行', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 1. Make the loop separator be a new-line in POSIX compliant fashion\nset -f; IFS=$\'\n\'\n# Docker 检测是否已 Root 身份运行，如果是 Root 运行则不合规\nflag=0\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $containers\n    do\n      user=$(docker inspect --format \'User={{.Config.User}}\' \"$c\")\n      if [ \"$user\" = \"User=0\" ] || [ \"$user\" = \"User=root\" ] || [ \"$user\" = \"User=\" ] || [ \"$user\" = \"User=[]\" ] || [ \"$user\" = \"User=\" ]; then\n        name=$(docker inspect --format \'Name={{.Name}}\' \"$c\"|awk -F/ \'{print $2}\')\n        #\n        echo -e \"${RED}HummerError${NC}: 容器 $name ID: $c 是以 root 运行\"\n        flag=1\n      fi\n      if [ $flag != 1 ];then\n        echo -e \"${GREEN}HummerSuccess${NC}: $c is ok\"\n      fi\n    done\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', '检测 Docker 容器是否存在特权端口', 1, 'HighRisk', '检测 Docker 容器是否存在特权端口', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 10. 检测是否映射特权端口\n\nfail=0\nprivileged_port_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  # Port format is private port -> ip: public port\n  ports=$(docker port \"$c\" | awk \'{print $0}\' | cut -d \':\' -f2)\n\n\n  for port in $ports; do\n    if [ -n \"$port\" ] && [ \"$port\" -lt 1024 ]; then\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 检查特权端口是否在容器内运行！\"\n        echo -e \"${RED}HummerError${NC}: Privileged Port in use: $port in $c\"\n        privileged_port_containers=\"$privileged_port_containers $c:$port\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}: Privileged Port in use: $port in $c\"\n      privileged_port_containers=\"$privileged_port_containers $c:$port\"\n    fi\n  done\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到特权端口映射！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', '检测 Docker 容器是否是特权容器', 1, 'CriticalRisk', '检测 Docker 容器是否是特权容器', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 7.确保不使用特权容器\nfail=0\nprivileged_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  privileged=$(docker inspect --format \'{{ .HostConfig.Privileged }}\' \"$c\")\n\n  if [ \"$privileged\" = \"true\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e \"Ensure that privileged containers are not used (Automated)\"\n      echo -e \"${RED}HummerError${NC}: Container running in Privileged mode: $c\"\n      privileged_containers=\"$privileged_containers $c\"\n      fail=1\n      continue\n    fi\n    echo \"     * Container running in Privileged mode: $c\"\n    privileged_containers=\"$privileged_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: Ensure that privileged containers are not used (Automated)\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', '查看 Docker 容器是否启用 SSH 服务', 1, 'MediumRisk', '查看 Docker 容器是否启用 SSH 服务', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n#9. 检测容器内是否有 sshd 的服务，如果有是不合规的\n\nfail=0\nssh_exec_containers=\"\"\nprintcheck=0\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n\n  processes=$(docker exec \"$c\" ps -el 2>/dev/null | grep -c sshd | awk \'{print $1}\')\n  if [ \"$processes\" -ge 1 ]; then\n    #\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: Container running sshd: $c\"\n      ssh_exec_containers=\"$ssh_exec_containers $c\"\n      fail=1\n      printcheck=1\n    else\n      echo -e \"     * Container running sshd: $c\"\n      ssh_exec_containers=\"$ssh_exec_containers $c\"\n    fi\n  fi\n\n  exec_check=$(docker exec \"$c\" ps -el 2>/dev/null)\n  if [ $? -eq 255 ]; then\n      if [ $printcheck -eq 0 ]; then\n        echo -e  \"${RED}HummerError${NC}: 确保 sshd 不在容器内运行(自动)!\"\n        printcheck=1\n      fi\n    echo -e \"${RED}HummerError${NC}: Docker exec fails: $c\"\n    ssh_exec_containers=\"$ssh_exec_containers $c\"\n    fail=1\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器!\"\nfi\n# We went through all the containers and found none with sshd\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: sshd 服务不在容器内运行!\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', '查看 Docker 容器是否配置 Selinux 安全模块', 1, 'MediumRisk', '查看 Docker 容器是否配置 Selinux 安全模块', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# Selinux 检测\n\nfail=0\nno_securityoptions_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\nfor c in $(docker ps -qa); do\n  policy=$(docker inspect --format \'SecurityOpt={{ .HostConfig.SecurityOpt }}\' \"$c\")\n\n  if [ \"$policy\" = \"SecurityOpt=\" ] || [ \"$policy\" = \"SecurityOpt=[]\" ] || [ \"$policy\" = \"SecurityOpt=\" ]; then\n    #\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: 未找到 SecurityOptions 配置: $c\"\n      no_securityoptions_containers=\"$no_securityoptions_containers $c\"\n      fail=1\n      continue\n    fi\n    echo -e \"${RED}HummerError${NC}: 未找到 SecurityOptions 配置: $c\"\n    no_securityoptions_containers=\"$no_securityoptions_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n# We went through all the containers and found none without SELinux\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}:  确保设置了 SELinux 安全选项（如果适用)\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', '查看 Docker 容器是否配置 apparmor 安全模块', 1, 'LowRisk', '查看 Docker 容器是否配置 apparmor 安全模块', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 5.Docker runtime 检测 AppArmor 是否启用\nfail=0\nno_apparmor_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n    policy=$(docker inspect --format \'AppArmorProfile={{ .AppArmorProfile }}\' \"$c\")\n\n    if [ \"$policy\" = \"AppArmorProfile=\" ] || [ \"$policy\" = \"AppArmorProfile=[]\" ] || [ \"$policy\" = \"AppArmorProfile=\" ] || [ \"$policy\" = \"AppArmorProfile=unconfined\" ]; then\n      #\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 确保启用 AppArmor 配置文件（如果适用）,No AppArmorProfile Found: $c\"\n        no_apparmor_containers=\"$no_apparmor_containers $c\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}: No AppArmorProfile Found: $c\"\n      no_apparmor_containers=\"$no_apparmor_containers $c\"\n    fi\n  done\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n\n# We went through all the containers and found none without AppArmor\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保启用 AppArmor 配置文件（如果适用）（自动）\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', '查看 Docker 镜像是否使用了 update 命令', 1, 'LowRisk', '查看 Docker 镜像是否使用了 update 命令', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\n\n#检查 Dockerfile,如果检测到有 update 构建历史，则为不合格，可以使用 no-cache\nfail=0\nimages=$(docker images -qa)\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nif [ -n \"$images\" ];then\n  for img in $images\ndo\n    if docker history \"$img\" 2>/dev/null | grep -e \"update\" >/dev/null 2>&1; then\n      if [ $fail -eq 0 ]; then\n        fail=1\n        echo -e \"Info：check\"\n      fi\n      imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2>/dev/null)\n      if ! [ \"$imgName\" = \'[]\' ]; then\n        echo -e \"${RED}HummerError${NC}: Update instruction found: $imgName\"\n        update_images=\"$update_images $imgName\"\n      fi\n    fi\ndone\nelse\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image\"\nfi\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: PAAS\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', '检测 Docker 镜像是否配置 healthcheck', 1, 'LowRisk', '检测 Docker 镜像是否配置 healthcheck', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 2. 检测 Docker Image 是否配置 healthcheck，如果没有配置则是不合格\nflag=0\nimages=$(docker images -qa)\n\nif [ -n \"$images\" ];then\n  for img in $images\n  do\n    if docker inspect --format=\'{{.Config.Healthcheck}}\' \"$img\" 2>/dev/null | grep -e \"\" >/dev/null 2>&1; then\n      if [ $flag -eq 0 ]; then\n        flag=1\n      fi\n      imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2>/dev/null)\n      if ! [ \"$imgName\" = \'[]\' ]; then\n        echo -e \"${RED}HummerError${NC}: No Healthcheck found: $imgName\"\n        no_health_images=\"$no_health_images $imgName\"\n      else\n        echo -e \"${RED}HummerError${NC}: No Healthcheck found: $img\"\n        no_health_images=\"$no_health_images $img\"\n      fi\n    fi\n  done\nelse\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image!\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`, `xpack_tag`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', '检测 DockerFile 是否使用 ADD', 1, 'CriticalRisk', '检测 DockerFile 是否使用 ADD', '#!/usr/bin/env bash\n\ndocker -v > /dev/null 2>&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 4.检测 Dockerfile 中使用的是 COPY 而不是 ADD，如果使用 URL ADD需要特色处理\nfail=0\nadd_images=\"\"\nimages=$(docker images -qa)\n\nif [ -n \"$images\" ];then\n  for img in $images\n    do\n      if docker history --format \"{{ .CreatedBy }}\" --no-trunc \"$img\" | \\\n        sed \'$d\' | grep -q \'ADD\'; then\n        if [ $fail -eq 0 ]; then\n          fail=1\n          echo -e \"${RED}HummerError${NC}: 确保在 Dockerfiles 中使用 COPY 而不是 ADD（手动)\"\n        fi\n        imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2>/dev/null)\n        if ! [ \"$imgName\" = \'[]\' ]; then\n          echo -e \"${RED}HummerError${NC}:  ADD in image history: $imgName\"\n          add_images=\"$add_images $imgName\"\n        fi\n      fi\n    done\n  else\n    echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image\"\nfi\n\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保在 Dockerfiles 中使用 COPY 而不是 ADD（手动)\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux', 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('50269479-4669-4819-a702-1a4e1f8d22cd', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', 'tagging');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('d89105e6-f50a-461b-a9ab-349fa203c519', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('c735ca37-97a4-4e0d-b221-fe9895183dfc', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('6bbab13e-4758-4e2c-89f5-cba7accf2443', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('d88f9ad4-2d52-43e1-abc3-3810a8d556d8', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('06b5de4c-996c-4f78-8e63-bde45d9311c6', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('15201ad2-7e26-433e-91bf-f13343ea6d1b', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('600a0f70-23a4-4895-a2a0-5f3653533a8c', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('75bcd461-c341-4431-b575-9f238a61f8b0', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('ae89205d-6baa-44b8-a8ea-e29c1a020ff8', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('0c1da51e-be72-4494-bc1d-c56346b20cad', 'safety');

SELECT id INTO @groupId1 FROM rule_group WHERE name = 'Aliyun 等保预检';
SELECT id INTO @groupId2 FROM rule_group WHERE name = 'Aliyun Redis 最佳安全实践';
SELECT id INTO @groupId3 FROM rule_group WHERE name = 'Aliyun Ecs 最佳安全实践';

INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('05750239-82ff-4076-b0aa-f00d6ec2cb05', 'Aliyun 分配了公网IP地址的 ECS 实例公网出带宽最大值小于指定值', 1, 'LowRisk', 'Aliyun 已分配公网IP地址的 ECS 实例的公网出带宽的最大值小于或等于指定值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun 已分配公网IP地址的 ECS 实例的公网出带宽的最大值小于或等于指定值，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-max-bandwidth-out\n      resource: aliyun.ecs\n      filters:\n        - type: max-bandwidth-out\n          max: ${{max}}\n          min: ${{min}}', '[{\"defaultValue\":\"20\",\"name\":\"最大值\",\"key\":\"max\",\"required\":true},{\"defaultValue\":\"0\",\"name\":\"最小值\",\"key\":\"min\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('0ea6035a-b344-426c-bf2e-eb74abe17318', 'Aliyun Redis 实例满足指定内存容量要求', 1, 'LowRisk', 'Aliyun Redis 实例满足指定内存容量要求，符合视为“合规”，否则视为“不合规”', 'policies:\n    #Aliyun Redis 实例满足指定内存容量要求，符合视为“合规”，否则视为“不合规”\n    - name: aliyun-redis-capacity\n      resource: aliyun.redis\n      filters:\n        - type: capacity\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"内存大小\",\"defaultValue\":\"1024\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('4a15ed1e-ed28-403b-a75b-86fa92a46370', 'Aliyun ECS 实例内存满足最低要求', 1, 'LowRisk', 'Aliyun ECS 实例的内存大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun ECS 实例的内存大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-memory\n      resource: aliyun.ecs\n      filters:\n        - type: memory\n          value: ${{value}}', '[{\"defaultValue\":\"16\",\"name\":\"内存大小，单位 GB\",\"key\":\"value\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('8e095e05-d003-4c8d-b6b2-5e168945f861', 'Aliyun ECS 实例付费类型为包年包月', 1, 'MediumRisk', 'Aliyun ECS 实例的付费类型为包年包月，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun ECS 实例的付费类型为包年包月，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-charge-type\n      resource: aliyun.ecs\n      filters:\n        - type: charge-type\n          chargeType: \"${{chargeType}}\"', '[{\"key\":\"chargeType\",\"name\":\"收费类型 PrePaid：包年包月， PostPaid：按量付费。\",\"defaultValue\":\"PrePaid\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('95fad480-2f79-4e2d-875f-bb07d5f96724', 'Aliyun ECS 实例开启释放保护', 1, 'HighRisk', 'Aliyun ECS实例开启释放保护，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun ECS实例开启释放保护，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-deletion-protection\n      resource: aliyun.ecs\n      filters:\n        - type: deletion-protection\n          value: ${{value}}', '[{\"defaultValue\":\"true\",\"name\":\"是否开启，开启为true 否则为false\",\"key\":\"value\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1,'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('ace99f8d-cfff-49d6-bedf-30aebd92743d', 'Aliyun ECS 实例规格符合标准要求', 1, 'MediumRisk', 'Aliyun ECS实例规格符合标准要求，符合视为“合规”，否则视为“不合规”。', 'policies:\n    # Aliyun ECS实例规格符合标准要求，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-instance-type\n      resource: aliyun.ecs\n      filters:\n        - type: instance-type\n          instanceTypes: \"${{instanceTypes}}\"', '[{\"defaultValue\":\"ecs.c5.large,ecs.c5.2xlargeecs.sn2.large\",\"name\":\"实例规格\",\"key\":\"instanceTypes\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('b01972be-5b30-4686-8368-29421bcf76e4', 'Aliyun ECS 实例 CPU 核数满足最低要求', 1, 'LowRisk', 'Aliyun ECS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #ECS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-cpu-number\n      resource: aliyun.ecs\n      filters:\n        - type: cpu-number\n          value: ${{value}}', '[{\"defaultValue\":\"4\",\"name\":\"CPU 核数\",\"key\":\"value\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('b16ddc8d-90b0-46d3-a0b0-5f8f79ea710b', 'Aliyun 按量付费的ECS已停机实例使用节省停机模式', 1, 'MediumRisk', 'Aliyun 按量付费的ECS实例停机时使用节省停机模式，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun 按量付费的ECS实例停机时使用节省停机模式，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-stopped-mode\n      resource: aliyun.ecs\n      filters:\n        - type: stopped-mode\n          chargeType: \"${{chargeType}}\"\n          stoppedMode: \"${{stoppedMode}}\"', '[{\"key\":\"chargeType\",\"name\":\"收费方式，PrePaid：包年包月。PostPaid：按量付费。\",\"defaultValue\":\"PostPaid\",\"required\":true},{\"key\":\"stoppedMode\",\"name\":\"停机后是否继续收费，KeepCharging：停机后继续收费。 StopCharging：停机后不收费。\",\"defaultValue\":\"StopCharging\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('d1a2010c-efea-418d-a6d6-e734c75102e3', 'Aliyun Redis 实例的节点类型为双副本', 1, 'HighRisk', 'Aliyun Redis 实例的节点类型为双副本，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun Redis 实例的节点类型为双副本，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-redis-node-type\n      resource: aliyun.redis\n      filters:\n        - type: node-type\n          value: \"${{value}}\"', '[{\"defaultValue\":\"double\",\"name\":\"节点类型：double：双副本，single：单副本。\",\"key\":\"value\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('e298729a-fbff-4b5b-96a0-d6086de159a8', 'Aliyun ECS 固定公网IP实例按固定带宽计费', 1, 'LowRisk', 'Aliyun ECS 实例已分配固定公网IP地址，且公网带宽的计费方式按固定带宽计费，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Aliyun ECS实例已分配固定公网IP地址，且公网带宽的计费方式按固定带宽计费，符合视为“合规”，否则视为“不合规”。\n    - name: aliyun-ecs-internet-charge-type\n      resource: aliyun.ecs\n      filters:\n        - type: internet-charge-type\n          chargeType: \"${{chargeType}}\"', '[{\"key\":\"chargeType\",\"name\":\"网络计费类型。可能值：PayByBandwidth：按固定带宽计费。 PayByTraffic：按使用流量计费。\",\"defaultValue\":\"PayByBandwidth\",\"required\":true}]', 'hummer-aliyun-plugin', '阿里云', 'aliyun.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('8e095e05-d003-4c8d-b6b2-5e168945f861', 'cost');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('95fad480-2f79-4e2d-875f-bb07d5f96724', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('b16ddc8d-90b0-46d3-a0b0-5f8f79ea710b', 'cost');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e298729a-fbff-4b5b-96a0-d6086de159a8', 'cost');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('0ea6035a-b344-426c-bf2e-eb74abe17318', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('d1a2010c-efea-418d-a6d6-e734c75102e3', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('05750239-82ff-4076-b0aa-f00d6ec2cb05', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('b01972be-5b30-4686-8368-29421bcf76e4', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('ace99f8d-cfff-49d6-bedf-30aebd92743d', 'safety');

INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('52d18897-a9f8-46c6-a79a-4924eba69905', 'b01972be-5b30-4686-8368-29421bcf76e4', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('551cd3d0-3974-42a6-9b06-6cd5bbc0f9a4', 'd1a2010c-efea-418d-a6d6-e734c75102e3', 'aliyun.redis');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('672b785d-2437-4143-be4b-0481fa82827b', '0ea6035a-b344-426c-bf2e-eb74abe17318', 'aliyun.redis');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('69c7ba1a-ba60-4695-b29e-dbd0d790e5b9', '8e095e05-d003-4c8d-b6b2-5e168945f861', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('bd50840f-426c-423f-9d32-7283f8c53597', '4a15ed1e-ed28-403b-a75b-86fa92a46370', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('c4cf560a-b8a2-4b27-95af-bf88e37c030e', 'b16ddc8d-90b0-46d3-a0b0-5f8f79ea710b', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('cd7f9703-8f93-459d-8c0c-69d5d805ad88', 'ace99f8d-cfff-49d6-bedf-30aebd92743d', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('d3ee5bb6-0084-4b70-8763-5ced68a2a9e5', '05750239-82ff-4076-b0aa-f00d6ec2cb05', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('f0d585ac-d59c-4313-bb92-09f1fa3f0c15', '95fad480-2f79-4e2d-875f-bb07d5f96724', 'aliyun.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('fd11d60a-ee97-4d95-b3ae-b0aa4206048e', 'e298729a-fbff-4b5b-96a0-d6086de159a8', 'aliyun.ecs');

INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('0ea6035a-b344-426c-bf2e-eb74abe17318', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('d1a2010c-efea-418d-a6d6-e734c75102e3', '127');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('05750239-82ff-4076-b0aa-f00d6ec2cb05', '2');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('b01972be-5b30-4686-8368-29421bcf76e4', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('4a15ed1e-ed28-403b-a75b-86fa92a46370', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('ace99f8d-cfff-49d6-bedf-30aebd92743d', '115');

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('ace99f8d-cfff-49d6-bedf-30aebd92743d', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('4a15ed1e-ed28-403b-a75b-86fa92a46370', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('b01972be-5b30-4686-8368-29421bcf76e4', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('05750239-82ff-4076-b0aa-f00d6ec2cb05', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d1a2010c-efea-418d-a6d6-e734c75102e3', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('0ea6035a-b344-426c-bf2e-eb74abe17318', @groupId1);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('0ea6035a-b344-426c-bf2e-eb74abe17318', @groupId2);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d1a2010c-efea-418d-a6d6-e734c75102e3', @groupId2);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('b01972be-5b30-4686-8368-29421bcf76e4', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('4a15ed1e-ed28-403b-a75b-86fa92a46370', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('95fad480-2f79-4e2d-875f-bb07d5f96724', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('05750239-82ff-4076-b0aa-f00d6ec2cb05', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e298729a-fbff-4b5b-96a0-d6086de159a8', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('b16ddc8d-90b0-46d3-a0b0-5f8f79ea710b', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('ace99f8d-cfff-49d6-bedf-30aebd92743d', @groupId3);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('8e095e05-d003-4c8d-b6b2-5e168945f861', @groupId3);

INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('013a1d10-1c92-4eb6-bff1-c3979f3501fe', 'Huawei RDS 实例 CPU 核数满足最低要求', 1, 'LowRisk', 'Huawei RDS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Huawei RDS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-rds-cpu-number\n      resource: huawei.rds\n      filters:\n        - type: cpu-number\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"CPU 核数\",\"defaultValue\":\"4\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('05d0f605-e41d-4191-9437-b804f59decf3', 'Huawei ECS 实例 CPU 核数满足最低要求', 1, 'LowRisk', 'Huawei ECS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #ECS 实例的 CPU 核数大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-cpu-number\n      resource: huawei.ecs\n      filters:\n        - type: cpu-number\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"CPU 核数\",\"defaultValue\":\"4\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('0bba4b47-0cf4-4cc8-a699-07b016688a98', 'Huawei ELB 实例为独享型实例', 1, 'HighRisk', 'Huawei ELB 实例为独享型实例，符合视为“合规”，否则视为“不合规”', 'policies:\n    # Huawei ELB 实例为独享型实例，符合视为“合规”，否则视为“不合规”\n    - name: huawei-elb-guaranteed\n      resource: huawei.elb\n      filters:\n        - type: guaranteed\n          value: \"${{value}}\"', '[{\"key\":\"value\",\"name\":\"是否为独享型\",\"defaultValue\":\"true\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('1de637fb-fd5e-4b72-a29d-54835e070458', 'Huawei ECS 电源状态检测', 1, 'HighRisk', 'Huawei ECS 电源状态为运行中，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Huawei ECS 电源状态为运行中，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-ecs-power-state\n      resource: huawei.ecs\n      filters:\n        - type: power-state\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"状态 0：NOSTATE，1：RUNNING ，4：SHUTDOWN\",\"defaultValue\":\"1\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('231129f8-2616-4037-8442-112753d55a29', 'Huawei Rds 实例满足指定内存容量要求', 1, 'LowRisk', 'Huawei Rds 实例满足指定内存容量要求，符合视为“合规”，否则视为“不合规”', 'policies:\n    #Huawei Rds 实例满足指定内存容量要求，符合视为“合规”，否则视为“不合规”\n    - name: huawei-rds-memory\n      resource: huawei.rds\n      filters:\n        - type: memory\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"内存大小\",\"defaultValue\":\"16\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('310b8a42-87df-4c6a-8cf6-62a2a59ffe4e', 'Huawei ELB 实例删除保护检测', 1, 'MediumRisk', 'Huawei ELB 实例开启删除保护，符合视为“合规”，否则视为“不合规”', 'policies:\n    # Huawei ELB 实例开启删除保护，符合视为“合规”，否则视为“不合规”\n    - name: huawei-elb-deletion-protection-enable\n      resource: huawei.elb\n      filters:\n        - type: deletion-protection-enable\n          value: \"${{value}}\"', '[{\"key\":\"value\",\"name\":\"是否开启删除保护\",\"defaultValue\":\"true\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('5c477740-6535-46d7-8bb8-bef18493b048', 'Huawei ECS 实例付费类型为包年包月', 1, 'LowRisk', 'Huawei ECS 实例付费类型为包年包月，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Huawei ECS 实例付费类型为包年包月，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-ecs-charging-mode\n      resource: huawei.ecs\n      filters:\n        - type: charging-mode\n          value: \"${{value}}\"', '[{\"key\":\"value\",\"name\":\"记费类型 “0”：按需计费， “1”：按包年包月计费  ， \\\"2\\\"：竞价实例计费\",\"defaultValue\":\"1\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('8ee70e95-9663-42d6-bd7a-e98788c0e5b9', 'Huawei ECS 实例内存满足最低要求', 1, 'LowRisk', 'Huawei ECS 实例的内存大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Huawei ECS 实例的内存大于等于您设置的期望值，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-ecs-memory\n      resource: huawei.ecs\n      filters:\n        - type: memory\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"内存大小，单位 GB\",\"defaultValue\":\"16\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('e126ae95-0e9f-4d12-869a-2d9309e3482b', 'Huawei ECS 状态检测', 1, 'HighRisk', 'Huawei ECS 状态为正常运行状态，符合视为“合规”，否则视为“不合规”。', 'policies:\n    #Huawei ECS 状态为正常运行状态，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-ecs-host-status\n      resource: huawei.ecs\n      filters:\n        - type: host-status\n          value: ${{value}}', '[{\"key\":\"value\",\"name\":\"实例状态\",\"defaultValue\":\"ACTIVE\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('e89ab77a-d1ca-489b-9756-9ac3115ee111', 'Huawei ECS 实例规格符合标准要求', 1, 'LowRisk', 'Huawei ECS实例规格符合标准要求，符合视为“合规”，否则视为“不合规”。', 'policies:\n    # Huawei ECS实例规格符合标准要求，符合视为“合规”，否则视为“不合规”。\n    - name: huawei-ecs-instance-type\n      resource: huawei.ecs\n      filters:\n        - type: instance-type\n          instanceTypes: \"${{instanceTypes}}\"', '[{\"defaultValue\":\"s6.large.4.liunx,s6.xlarge.4.liunx\",\"name\":\"规格\",\"key\":\"instanceTypes\",\"required\":true}]', 'hummer-huawei-plugin', '华为云', 'fusion.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('013a1d10-1c92-4eb6-bff1-c3979f3501fe', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('05d0f605-e41d-4191-9437-b804f59decf3', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('0bba4b47-0cf4-4cc8-a699-07b016688a98', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('1de637fb-fd5e-4b72-a29d-54835e070458', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('231129f8-2616-4037-8442-112753d55a29', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('310b8a42-87df-4c6a-8cf6-62a2a59ffe4e', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('5c477740-6535-46d7-8bb8-bef18493b048', 'cost');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('8ee70e95-9663-42d6-bd7a-e98788c0e5b9', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e126ae95-0e9f-4d12-869a-2d9309e3482b', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e89ab77a-d1ca-489b-9756-9ac3115ee111', 'safety');

INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('10fcf18b-1134-425c-86c8-b7000e45bd18', 'e126ae95-0e9f-4d12-869a-2d9309e3482b', 'huawei.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('2ad3d3a1-a5bc-41f5-b23a-35da6f765707', '231129f8-2616-4037-8442-112753d55a29', 'huawei.rds');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('3697a808-2947-49b3-aeae-743a79b660ea', '05d0f605-e41d-4191-9437-b804f59decf3', 'huawei.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('428af06e-8a63-4acf-a1a8-2250719e0f70', '1de637fb-fd5e-4b72-a29d-54835e070458', 'huawei.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('535306f2-2196-4cd0-87d5-55efda16fa90', 'e89ab77a-d1ca-489b-9756-9ac3115ee111', 'huawei.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('6ae1081c-265a-4c5b-8c44-ac8a78413321', '013a1d10-1c92-4eb6-bff1-c3979f3501fe', 'huawei.rds');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('83ea0879-c94e-44a2-8ca7-24474cd49060', '310b8a42-87df-4c6a-8cf6-62a2a59ffe4e', 'huawei.elb');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('d8daed16-738f-418f-9980-c420889ad0eb', '0bba4b47-0cf4-4cc8-a699-07b016688a98', 'huawei.elb');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('e30c9cb9-1e1b-4b15-8f50-c975ee6b5963', '5c477740-6535-46d7-8bb8-bef18493b048', 'huawei.ecs');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('f9b1a83a-20fc-4e0e-9771-04e87ecd8013', '8ee70e95-9663-42d6-bd7a-e98788c0e5b9', 'huawei.ecs');

INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('013a1d10-1c92-4eb6-bff1-c3979f3501fe', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('05d0f605-e41d-4191-9437-b804f59decf3', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1de637fb-fd5e-4b72-a29d-54835e070458', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('231129f8-2616-4037-8442-112753d55a29', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('8ee70e95-9663-42d6-bd7a-e98788c0e5b9', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('e126ae95-0e9f-4d12-869a-2d9309e3482b', '115');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('e89ab77a-d1ca-489b-9756-9ac3115ee111', '115');

SELECT id INTO @groupId4 FROM rule_group WHERE name = 'Huawei 等保预检';

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('013a1d10-1c92-4eb6-bff1-c3979f3501fe', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('05d0f605-e41d-4191-9437-b804f59decf3', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('0bba4b47-0cf4-4cc8-a699-07b016688a98', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('1de637fb-fd5e-4b72-a29d-54835e070458', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('231129f8-2616-4037-8442-112753d55a29', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('310b8a42-87df-4c6a-8cf6-62a2a59ffe4e', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('5c477740-6535-46d7-8bb8-bef18493b048', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('8ee70e95-9663-42d6-bd7a-e98788c0e5b9', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e126ae95-0e9f-4d12-869a-2d9309e3482b', @groupId4);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e89ab77a-d1ca-489b-9756-9ac3115ee111', @groupId4);

CREATE TABLE IF NOT EXISTS `report_result` (
    `id`                         varchar(50)         NOT NULL COMMENT 'ID',
    `name`                       varchar(256)        DEFAULT NULL COMMENT '名称',
    `status`                     varchar(45)         DEFAULT NULL COMMENT '状态',
    `create_time`                bigint              DEFAULT NULL COMMENT '创建时间',
    `update_time`                bigint              DEFAULT NULL COMMENT '更新时间',
    `operator`                   varchar(100)        DEFAULT NULL COMMENT '操作人',
    `download_number`            bigint              DEFAULT NULL COMMENT '下载次数',
    `history_number`             bigint              DEFAULT NULL COMMENT '历史生成次数',
    `pdf_path`                   varchar(256)        DEFAULT NULL COMMENT 'pdf path',
    `pdf_log`                    longtext            DEFAULT NULL COMMENT 'pdf log',
    PRIMARY KEY (`id`)
    ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;

CREATE TABLE IF NOT EXISTS `report_result_log` (
                                                   `id`                           int                 NOT NULL AUTO_INCREMENT,
                                                   `result_id`                    varchar(50)         DEFAULT NULL COMMENT '报告结果ID',
    `status`                       varchar(45)         DEFAULT NULL COMMENT '状态',
    `create_time`                  bigint              DEFAULT NULL COMMENT '创建时间',
    `operator`                     varchar(100)        DEFAULT NULL COMMENT '操作人',
    `download_number`              bigint              DEFAULT NULL COMMENT '下载次数',
    `pdf_path`                     varchar(256)        DEFAULT NULL COMMENT 'pdf path',
    `pdf_log`                      longtext            DEFAULT NULL COMMENT 'pdf log',
    PRIMARY KEY (`id`)
    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4;

CREATE TABLE IF NOT EXISTS `report_result_detail` (
                                                      `id`                           int                 NOT NULL AUTO_INCREMENT,
                                                      `result_id`                    varchar(50)         DEFAULT NULL COMMENT '报告结果ID',
    `create_time`                  bigint              DEFAULT NULL COMMENT '创建时间',
    `operator`                     varchar(100)        DEFAULT NULL COMMENT '操作人',
    `type`                         varchar(128)        DEFAULT NULL COMMENT '所属类型',
    `account_id`                   varchar(128)        DEFAULT NULL COMMENT '检测账号ID',
    `status`                       varchar(100)        DEFAULT NULL COMMENT '状态',
    `order_index`                  bigint              DEFAULT NULL COMMENT '排序',
    PRIMARY KEY (`id`)
    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4;


INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd90', 'K8s ClusterRole 执行权限检测', 1, 'MediumRisk', '检测 ClusterRole 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-cluster-role-exec-rule\n      resource: k8s.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 exec 的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"pods/exec\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"create\",\"required\":true}]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'K8s Pod 非根容器检测', 1, 'MediumRisk', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-pod-none-root-containers\n      resource: k8s.pod\n      filters:\n        - type: none-root-containers\n          run_as_user: ${{runAsUesr}}\n          run_as_group: ${{runAsGroup}}', '[{\"key\":\"runAsUesr\",\"name\":\"runAsUesr\",\"defaultValue\":\"1000\",\"required\":true},{\"key\":\"runAsGroup\",\"name\":\"runAsGroup\",\"defaultValue\":\"3000\",\"required\":true}]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('85a5b213-1d03-4774-878f-fb6249937047', 'K8s ReplicaSet 资源限制检测', 1, 'HighRisk', 'K8s ReplicaSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-replica-set-resource-limit\n      resource: k8s.replica-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a5e', 'K8s Role 执行权限检测', 1, 'MediumRisk', '检测 Role 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-role-exec-rule\n      resource: k8s.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"defaultValue\":\"admin,edit,update\",\"name\":\"可以具备 exec 的角色 name\",\"key\":\"names\",\"required\":true},{\"defaultValue\":\"pods/exec\",\"name\":\"资源\",\"key\":\"resources\",\"required\":true},{\"defaultValue\":\"create\",\"name\":\"动作\",\"key\":\"verbs\",\"required\":true}]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e966', 'K8s DaemonSet 资源限制检测', 1, 'HighRisk', 'K8s DaemonSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-daemon-set-resource-limit\n      resource: k8s.daemon-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec4e', 'K8s  Role 删除权限检测', 1, 'MediumRisk', '检测 Role 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-role-delete-rule\n      resource: k8s.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'K8s  ClusterRole 删除权限检测', 1, 'MediumRisk', '检测 ClusterRole 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-cluster-role-delete-rule\n      resource: k8s.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d1f', 'K8s Pod 资源限制检测', 1, 'HighRisk', 'K8s Pod 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-pod-resource-limit\n      resource: k8s.pod\n      filters:\n        - type: resource-limit', '[]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'K8s StatefulSet 资源限制检测', 1, 'HighRisk', 'K8s StatefulSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-stateful-set-resource-limit\n      resource: k8s.stateful-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'K8s Deployment 资源限制检测', 1, 'HighRisk', 'K8s Deployment 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: k8s-deployment-resource-limit\n      resource: k8s.deployment\n      filters:\n        - type: resource-limit', '[]', 'hummer-k8s-plugin', 'Kubernetes', 'k8s.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd90', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('85a5b213-1d03-4774-878f-fb6249937047', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a5e', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e966', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec4e', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d1f', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'safety');

INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('27c51b41-923d-4710-90d2-61174bed2802', '9af32c68-0250-4f0c-857c-a91ad525e966', 'k8s.daemon-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('2eac17f2-367b-4121-bc04-f8520954394f', 'c0583908-97bf-43e0-b5c0-3108cb74ec4e', 'k8s.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('4fb3d706-327e-4384-a010-3242c7ac2871', '85a5b213-1d03-4774-878f-fb6249937047', 'k8s.replica-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('56975022-1487-4bba-bfdc-fc496989cfed', 'd86e5e4b-a9de-415c-b5b6-061a08812d1f', 'k8s.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('7ca5c16d-5be5-4b53-b2dd-4e2bbee0bef0', 'e45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'k8s.stateful-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('8518ac4b-4a18-4be9-84c4-23a18e0acbe7', 'f00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'k8s.deployment');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('d9041673-5995-4100-92ff-f3708cf7b414', '19c7c58a-57ca-4142-bd10-5f36e68bdd90', 'k8s.cluster-role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('ea14eef5-a0c2-4024-bf82-31e7466c7fc7', '1d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'k8s.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('eca48b01-20b5-4359-8159-afe66054af06', '9433cafd-25ae-4966-8079-817bf61b1a5e', 'k8s.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('f0f3d886-2828-4611-a8f3-e3b897015a6a', 'cd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'k8s.cluster-role');

INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd90', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd90', '106');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc56', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('85a5b213-1d03-4774-878f-fb6249937047', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a5e', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a5e', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e966', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec4e', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec4e', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d4', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d4', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d1f', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca98c', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e2388c', '112');

INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('K8s 资源限制检测', '检测 K8s 资源是否存在限制，CPU 和内存资源应该为每个容器或命名空间设置一个限制，以防止资源耗尽。', '安全合规', 'hummer-k8s-plugin', 1, 'k8s', 1);
SELECT @groupId5 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('K8s 非根容器检测', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序。NSA和CISA鼓励开发人员构建容器应用程序，以非根用户身份执行。在构建时集成非根执行可以更好地保证应用程序在没有根权限的情况下正常运行。', '合规检查', 'hummer-k8s-plugin', 1, 'k8s', 1);
SELECT @groupId6 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('K8s 删除权限检测', '检测 K8s 角色的删除权限。攻击者可能试图破坏集群中的数据和资源。这包括删除部署、配置、存储和计算资源。', '安全合规', 'hummer-k8s-plugin', 1, 'k8s', 1);
SELECT @groupId7 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('K8s 执行权限检测', '检测 K8s 角色的执行权限。拥有权限的攻击者可以使用exec命令在集群中的容器中运行恶意命令。攻击者可以使用合法的映像，如操作系统映像（如Ubuntu）作为后门容器，并通过使用“kubectl exec”远程运行恶意代码。', '安全合规', 'hummer-k8s-plugin', 1, 'k8s', 1);
SELECT @groupId8 := LAST_INSERT_ID();


INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd90', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc56', @groupId6);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('85a5b213-1d03-4774-878f-fb6249937047', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a5e', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e966', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec4e', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d4', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d1f', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca98c', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e2388c', @groupId5);


INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('29c7c58a-57ca-4142-bd10-5f36e68bdd90', 'Rancher ClusterRole 执行权限检测', 1, 'MediumRisk', '检测 ClusterRole 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-cluster-role-exec-rule\n      resource: rancher.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 exec 的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"pods/exec\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"create\",\"required\":true}]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('2d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'Rancher Pod 非根容器检测', 1, 'MediumRisk', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-pod-none-root-containers\n      resource: rancher.pod\n      filters:\n        - type: none-root-containers\n          run_as_user: ${{runAsUesr}}\n          run_as_group: ${{runAsGroup}}', '[{\"key\":\"runAsUesr\",\"name\":\"runAsUesr\",\"defaultValue\":\"1000\",\"required\":true},{\"key\":\"runAsGroup\",\"name\":\"runAsGroup\",\"defaultValue\":\"3000\",\"required\":true}]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('15a5b213-1d03-4774-878f-fb6249937047', 'Rancher ReplicaSet 资源限制检测', 1, 'HighRisk', 'Rancher ReplicaSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-replica-set-resource-limit\n      resource: rancher.replica-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('1433cafd-25ae-4966-8079-817bf61b1a5e', 'Rancher Role 执行权限检测', 1, 'MediumRisk', '检测 Role 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-role-exec-rule\n      resource: rancher.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"defaultValue\":\"admin,edit,update\",\"name\":\"可以具备 exec 的角色 name\",\"key\":\"names\",\"required\":true},{\"defaultValue\":\"pods/exec\",\"name\":\"资源\",\"key\":\"resources\",\"required\":true},{\"defaultValue\":\"create\",\"name\":\"动作\",\"key\":\"verbs\",\"required\":true}]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('1af32c68-0250-4f0c-857c-a91ad525e966', 'Rancher DaemonSet 资源限制检测', 1, 'HighRisk', 'Rancher DaemonSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-daemon-set-resource-limit\n      resource: rancher.daemon-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('b0583908-97bf-43e0-b5c0-3108cb74ec4e', 'Rancher  Role 删除权限检测', 1, 'MediumRisk', '检测 Role 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-role-delete-rule\n      resource: rancher.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('bd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'Rancher  ClusterRole 删除权限检测', 1, 'MediumRisk', '检测 ClusterRole 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-cluster-role-delete-rule\n      resource: rancher.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('b86e5e4b-a9de-415c-b5b6-061a08812d1f', 'Rancher Pod 资源限制检测', 1, 'HighRisk', 'Rancher Pod 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-pod-resource-limit\n      resource: rancher.pod\n      filters:\n        - type: resource-limit', '[]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('t45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'Rancher StatefulSet 资源限制检测', 1, 'HighRisk', 'Rancher StatefulSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-stateful-set-resource-limit\n      resource: rancher.stateful-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('q00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'Rancher Deployment 资源限制检测', 1, 'HighRisk', 'Rancher Deployment 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: rancher-deployment-resource-limit\n      resource: rancher.deployment\n      filters:\n        - type: resource-limit', '[]', 'hummer-rancher-plugin', 'Rancher', 'rancher.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('29c7c58a-57ca-4142-bd10-5f36e68bdd90', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('2d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('15a5b213-1d03-4774-878f-fb6249937047', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('1433cafd-25ae-4966-8079-817bf61b1a5e', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('1af32c68-0250-4f0c-857c-a91ad525e966', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('b0583908-97bf-43e0-b5c0-3108cb74ec4e', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('bd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('b86e5e4b-a9de-415c-b5b6-061a08812d1f', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('t45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('q00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'safety');

INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('17c51b41-923d-4710-90d2-61174bed2802', '1af32c68-0250-4f0c-857c-a91ad525e966', 'rancher.daemon-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1eac17f2-367b-4121-bc04-f8520954394f', 'b0583908-97bf-43e0-b5c0-3108cb74ec4e', 'rancher.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1fb3d706-327e-4384-a010-3242c7ac2871', '15a5b213-1d03-4774-878f-fb6249937047', 'rancher.replica-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('16975022-1487-4bba-bfdc-fc496989cfed', 'b86e5e4b-a9de-415c-b5b6-061a08812d1f', 'rancher.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1ca5c16d-5be5-4b53-b2dd-4e2bbee0bef0', 't45e11ae-0b92-4b42-83cd-b8d6c0fca98c', 'rancher.stateful-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1518ac4b-4a18-4be9-84c4-23a18e0acbe7', 'q00830cc-7dc5-4f6d-abcb-ad3512e2388c', 'rancher.deployment');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('19041673-5995-4100-92ff-f3708cf7b414', '29c7c58a-57ca-4142-bd10-5f36e68bdd90', 'rancher.cluster-role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1a14eef5-a0c2-4024-bf82-31e7466c7fc7', '2d40f394-ffc3-498f-b87e-c5ab51d6cc56', 'rancher.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('1ca48b01-20b5-4359-8159-afe66054af06', '1433cafd-25ae-4966-8079-817bf61b1a5e', 'rancher.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('10f3d886-2828-4611-a8f3-e3b897015a6a', 'bd603fc9-a85e-428d-ab27-57bf47b2c8d4', 'rancher.cluster-role');

INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('29c7c58a-57ca-4142-bd10-5f36e68bdd90', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('29c7c58a-57ca-4142-bd10-5f36e68bdd90', '106');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('2d40f394-ffc3-498f-b87e-c5ab51d6cc56', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('15a5b213-1d03-4774-878f-fb6249937047', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1433cafd-25ae-4966-8079-817bf61b1a5e', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1433cafd-25ae-4966-8079-817bf61b1a5e', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1af32c68-0250-4f0c-857c-a91ad525e966', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('b0583908-97bf-43e0-b5c0-3108cb74ec4e', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('b0583908-97bf-43e0-b5c0-3108cb74ec4e', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('bd603fc9-a85e-428d-ab27-57bf47b2c8d4', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('bd603fc9-a85e-428d-ab27-57bf47b2c8d4', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('b86e5e4b-a9de-415c-b5b6-061a08812d1f', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('t45e11ae-0b92-4b42-83cd-b8d6c0fca98c', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('q00830cc-7dc5-4f6d-abcb-ad3512e2388c', '112');

INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('Rancher 资源限制检测', '检测 Rancher 资源是否存在限制，CPU 和内存资源应该为每个容器或命名空间设置一个限制，以防止资源耗尽。', '安全合规', 'hummer-rancher-plugin', 1, 'k8s', 1);
SELECT @groupId5 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('Rancher 非根容器检测', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序。NSA和CISA鼓励开发人员构建容器应用程序，以非根用户身份执行。在构建时集成非根执行可以更好地保证应用程序在没有根权限的情况下正常运行。', '合规检查', 'hummer-rancher-plugin', 1, 'k8s', 1);
SELECT @groupId6 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('Rancher 删除权限检测', '检测 Rancher 角色的删除权限。攻击者可能试图破坏集群中的数据和资源。这包括删除部署、配置、存储和计算资源。', '安全合规', 'hummer-rancher-plugin', 1, 'k8s', 1);
SELECT @groupId7 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('Rancher 执行权限检测', '检测 Rancher 角色的执行权限。拥有权限的攻击者可以使用exec命令在集群中的容器中运行恶意命令。攻击者可以使用合法的映像，如操作系统映像（如Ubuntu）作为后门容器，并通过使用“kubectl exec”远程运行恶意代码。', '安全合规', 'hummer-rancher-plugin', 1, 'k8s', 1);
SELECT @groupId8 := LAST_INSERT_ID();

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('29c7c58a-57ca-4142-bd10-5f36e68bdd90', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('2d40f394-ffc3-498f-b87e-c5ab51d6cc56', @groupId6);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('15a5b213-1d03-4774-878f-fb6249937047', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('1433cafd-25ae-4966-8079-817bf61b1a5e', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('1af32c68-0250-4f0c-857c-a91ad525e966', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('b0583908-97bf-43e0-b5c0-3108cb74ec4e', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('bd603fc9-a85e-428d-ab27-57bf47b2c8d4', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('b86e5e4b-a9de-415c-b5b6-061a08812d1f', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('t45e11ae-0b92-4b42-83cd-b8d6c0fca98c', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('q00830cc-7dc5-4f6d-abcb-ad3512e2388c', @groupId5);


INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd91', 'KubeSphere ClusterRole 执行权限检测', 1, 'MediumRisk', '检测 ClusterRole 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-cluster-role-exec-rule\n      resource: kubesphere.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 exec 的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"pods/exec\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"create\",\"required\":true}]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc51', 'KubeSphere Pod 非根容器检测', 1, 'MediumRisk', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-pod-none-root-containers\n      resource: kubesphere.pod\n      filters:\n        - type: none-root-containers\n          run_as_user: ${{runAsUesr}}\n          run_as_group: ${{runAsGroup}}', '[{\"key\":\"runAsUesr\",\"name\":\"runAsUesr\",\"defaultValue\":\"1000\",\"required\":true},{\"key\":\"runAsGroup\",\"name\":\"runAsGroup\",\"defaultValue\":\"3000\",\"required\":true}]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('85a5b213-1d03-4774-878f-fb6249937041', 'KubeSphere ReplicaSet 资源限制检测', 1, 'HighRisk', 'KubeSphere ReplicaSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-replica-set-resource-limit\n      resource: kubesphere.replica-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a51', 'KubeSphere Role 执行权限检测', 1, 'MediumRisk', '检测 Role 不可以执行到 pods 中，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-role-exec-rule\n      resource: kubesphere.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"defaultValue\":\"admin,edit,update\",\"name\":\"可以具备 exec 的角色 name\",\"key\":\"names\",\"required\":true},{\"defaultValue\":\"pods/exec\",\"name\":\"资源\",\"key\":\"resources\",\"required\":true},{\"defaultValue\":\"create\",\"name\":\"动作\",\"key\":\"verbs\",\"required\":true}]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e961', 'KubeSphere DaemonSet 资源限制检测', 1, 'HighRisk', 'KubeSphere DaemonSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-daemon-set-resource-limit\n      resource: kubesphere.daemon-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec41', 'KubeSphere  Role 删除权限检测', 1, 'MediumRisk', '检测 Role 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-role-delete-rule\n      resource: kubesphere.role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d1', 'KubeSphere  ClusterRole 删除权限检测', 1, 'MediumRisk', '检测 ClusterRole 没有删除权限，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-cluster-role-delete-rule\n      resource: kubesphere.cluster-role\n      filters:\n        - type: rule\n          names: \"${{names}}\"\n          resources: \"${{resources}}\"\n          verbs: \"${{verbs}}\"', '[{\"key\":\"names\",\"name\":\"可以具备 delete 权限的角色 name\",\"defaultValue\":\"admin,edit,update\",\"required\":true},{\"key\":\"resources\",\"name\":\"资源\",\"defaultValue\":\"secrets,pods,services,depolyments,replicasets,deamonsets,stateflsets,jobs,cronjobs\",\"required\":true},{\"key\":\"verbs\",\"name\":\"动作\",\"defaultValue\":\"delete,deletecollection\",\"required\":true}]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d11', 'KubeSphere Pod 资源限制检测', 1, 'HighRisk', 'KubeSphere Pod 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-pod-resource-limit\n      resource: kubesphere.pod\n      filters:\n        - type: resource-limit', '[]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca981', 'KubeSphere StatefulSet 资源限制检测', 1, 'HighRisk', 'KubeSphere StatefulSet 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-stateful-set-resource-limit\n      resource: kubesphere.stateful-set\n      filters:\n        - type: resource-limit', '[]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);
INSERT INTO `rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `plugin_id`, `plugin_name`, `plugin_icon`, `last_modified`, `flag`, `scan_type`, `suggestion`, `xpack_tag`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e23881', 'KubeSphere Deployment 资源限制检测', 1, 'HighRisk', 'KubeSphere Deployment 存在资源限制，符合视为合规，否则视为不合规', 'policies:\n    - name: kubesphere-deployment-resource-limit\n      resource: kubesphere.deployment\n      filters:\n        - type: resource-limit', '[]', 'hummer-kubesphere-plugin', 'KubeSphere', 'kubesphere.png', concat(unix_timestamp(now()), '004'), 1, 'custodian', NULL, 1);

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd91', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc51', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('85a5b213-1d03-4774-878f-fb6249937041', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a51', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e961', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec41', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d1', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d11', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca981', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e23881', 'safety');

INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('27c51b41-923d-4710-90d2-61174bed2808', '9af32c68-0250-4f0c-857c-a91ad525e961', 'kubesphere.daemon-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('2eac17f2-367b-4121-bc04-f85209543948', 'c0583908-97bf-43e0-b5c0-3108cb74ec41', 'kubesphere.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('4fb3d706-327e-4384-a010-3242c7ac2878', '85a5b213-1d03-4774-878f-fb6249937041', 'kubesphere.replica-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('56975022-1487-4bba-bfdc-fc496989cfe8', 'd86e5e4b-a9de-415c-b5b6-061a08812d11', 'kubesphere.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('7ca5c16d-5be5-4b53-b2dd-4e2bbee0bef8', 'e45e11ae-0b92-4b42-83cd-b8d6c0fca981', 'kubesphere.stateful-set');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('8518ac4b-4a18-4be9-84c4-23a18e0acbe8', 'f00830cc-7dc5-4f6d-abcb-ad3512e23881', 'kubesphere.deployment');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('d9041673-5995-4100-92ff-f3708cf7b418', '19c7c58a-57ca-4142-bd10-5f36e68bdd91', 'kubesphere.cluster-role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('ea14eef5-a0c2-4024-bf82-31e7466c7fc8', '1d40f394-ffc3-498f-b87e-c5ab51d6cc51', 'kubesphere.pod');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('eca48b01-20b5-4359-8159-afe66054af08', '9433cafd-25ae-4966-8079-817bf61b1a51', 'kubesphere.role');
INSERT INTO `rule_type` (`id`, `rule_id`, `resource_type`) VALUES ('f0f3d886-2828-4611-a8f3-e3b897015a68', 'cd603fc9-a85e-428d-ab27-57bf47b2c8d1', 'kubesphere.cluster-role');

INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd91', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd91', '106');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc51', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('85a5b213-1d03-4774-878f-fb6249937041', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a51', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a51', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e961', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec41', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec41', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d1', '36');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d1', '105');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d11', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca981', '112');
INSERT INTO `rule_inspection_report_mapping` (`rule_id`, `report_id`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e23881', '112');

INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('KubeSphere 资源限制检测', '检测 KubeSphere 资源是否存在限制，CPU 和内存资源应该为每个容器或命名空间设置一个限制，以防止资源耗尽。', '安全合规', 'hummer-kubesphere-plugin', 1, 'k8s', 1);
SELECT @groupId5 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('KubeSphere 非根容器检测', '容器引擎允许容器以具有非根组成员身份的非根用户身份运行应用程序。NSA和CISA鼓励开发人员构建容器应用程序，以非根用户身份执行。在构建时集成非根执行可以更好地保证应用程序在没有根权限的情况下正常运行。', '合规检查', 'hummer-kubesphere-plugin', 1, 'k8s', 1);
SELECT @groupId6 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('KubeSphere 删除权限检测', '检测 KubeSphere 角色的删除权限。攻击者可能试图破坏集群中的数据和资源。这包括删除部署、配置、存储和计算资源。', '安全合规', 'hummer-kubesphere-plugin', 1, 'k8s', 1);
SELECT @groupId7 := LAST_INSERT_ID();
INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`, `xpack_tag`) VALUES ('KubeSphere 执行权限检测', '检测 KubeSphere 角色的执行权限。拥有权限的攻击者可以使用exec命令在集群中的容器中运行恶意命令。攻击者可以使用合法的映像，如操作系统映像（如Ubuntu）作为后门容器，并通过使用“kubectl exec”远程运行恶意代码。', '安全合规', 'hummer-kubesphere-plugin', 1, 'k8s', 1);
SELECT @groupId8 := LAST_INSERT_ID();

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('19c7c58a-57ca-4142-bd10-5f36e68bdd91', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('1d40f394-ffc3-498f-b87e-c5ab51d6cc51', @groupId6);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('85a5b213-1d03-4774-878f-fb6249937041', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9433cafd-25ae-4966-8079-817bf61b1a51', @groupId8);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9af32c68-0250-4f0c-857c-a91ad525e961', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('c0583908-97bf-43e0-b5c0-3108cb74ec41', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('cd603fc9-a85e-428d-ab27-57bf47b2c8d1', @groupId7);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('d86e5e4b-a9de-415c-b5b6-061a08812d11', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e45e11ae-0b92-4b42-83cd-b8d6c0fca981', @groupId5);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f00830cc-7dc5-4f6d-abcb-ad3512e23881', @groupId5);
