
CREATE TABLE IF NOT EXISTS `image_group` (
    `id`                         varchar(50)         NOT NULL COMMENT 'ID',
    `name`                       varchar(256)        DEFAULT NULL COMMENT '分组名称',
    `repository`                 varchar(256)        DEFAULT NULL COMMENT 'repository',
    `create_time`                bigint              DEFAULT NULL COMMENT '创建时间',
    `update_time`                bigint              DEFAULT NULL COMMENT '更新时间',
    `creator`                    varchar(128)        DEFAULT NULL COMMENT '创建人',
    PRIMARY KEY (`id`)
    ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_bin;

INSERT INTO `image_group` (`id`, `name`, `create_time`, `update_time`, `creator`) VALUES ('d661se75-1r8c-2s54-cbe6-351sd29e91ff', 'default', concat(unix_timestamp(now()), '001'), concat(unix_timestamp(now()), '001'), 'admin');

ALTER TABLE `image` ADD `group_id` varchar(50) DEFAULT NULL COMMENT '分组Id';

UPDATE `image` SET group_id = 'd661se75-1r8c-2s54-cbe6-351sd29e91ff';

INSERT INTO `rule_group` (`name`, `description`, `level`, `plugin_id`, `flag`, `type`) VALUES ('Linux Docker 最佳安全配置', '用于检测 Docker 的最佳安全配置,包括对 Docker image、Docker runtime、Dockerfile、Docker 服务的配置文件进行检测，从而提供 Docker 容器服务的安全性。', '最佳实践', 'hummer-server-plugin', 1, 'server');

SELECT @groupId := LAST_INSERT_ID();

INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', @groupId);
INSERT INTO `rule_group_mapping` (`rule_id`, `group_id`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', @groupId);

INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', '查看 Docker 容器是否启用 SSH 服务', 1, 'MediumRisk', '查看 Docker 容器是否启用 SSH 服务', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n#9. 检测容器内是否有 sshd 的服务，如果有是不合规的\n\nfail=0\nssh_exec_containers=\"\"\nprintcheck=0\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n\n  processes=$(docker exec \"$c\" ps -el 2&gt;/dev/null | grep -c sshd | awk \'{print $1}\')\n  if [ \"$processes\" -ge 1 ]; then\n    # If it\'s the first container, fail the test\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}: Container running sshd: $c\"\n      ssh_exec_containers=\"$ssh_exec_containers $c\"\n      fail=1\n      printcheck=1\n    else\n      echo -e \"     * Container running sshd: $c\"\n      ssh_exec_containers=\"$ssh_exec_containers $c\"\n    fi\n  fi\n\n  exec_check=$(docker exec \"$c\" ps -el 2&gt;/dev/null)\n  if [ $? -eq 255 ]; then\n      if [ $printcheck -eq 0 ]; then\n        echo -e  \"${RED}HummerError${NC}: 确保 sshd 不在容器内运行(自动)!\"\n        printcheck=1\n      fi\n    echo -e \"${RED}HummerError${NC}: Docker exec fails: $c\"\n    ssh_exec_containers=\"$ssh_exec_containers $c\"\n    fail=1\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器!\"\nfi\n# We went through all the containers and found none with sshd\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: sshd 服务不在容器内运行!\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', '查看 Docker 容器是否配置 Selinux 安全模块', 1, 'MediumRisk', '查看 Docker 容器是否配置 Selinux 安全模块', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# Selinux 检测\n\nfail=0\nno_securityoptions_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\nfor c in $(docker ps -qa); do\n  policy=$(docker inspect --format \'SecurityOpt={{ .HostConfig.SecurityOpt }}\' \"$c\")\n\n  if [ \"$policy\" = \"SecurityOpt=\" ] || [ \"$policy\" = \"SecurityOpt=[]\" ] || [ \"$policy\" = \"SecurityOpt=\" ]; then\n    # If it\'s the first container, fail the test\n    if [ $fail -eq 0 ]; then\n      echo -e \"${RED}HummerError${NC}:warn,No SecurityOptions Found: $c\"\n      no_securityoptions_containers=\"$no_securityoptions_containers $c\"\n      fail=1\n      continue\n    fi\n    echo \"     * warn,No SecurityOptions Found: $c\"\n    no_securityoptions_containers=\"$no_securityoptions_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n# We went through all the containers and found none without SELinux\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}:  Ensure that, if applicable, SELinux security options are set (Automated)\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', '查看 Docker 容器是否配置 apparmor 安全模块', 1, 'LowRisk', '查看 Docker 容器是否配置 apparmor 安全模块', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 5.Docker runtime 检测 AppArmor 是否启用\nfail=0\nno_apparmor_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n    policy=$(docker inspect --format \'AppArmorProfile={{ .AppArmorProfile }}\' \"$c\")\n\n    if [ \"$policy\" = \"AppArmorProfile=\" ] || [ \"$policy\" = \"AppArmorProfile=[]\" ] || [ \"$policy\" = \"AppArmorProfile=\" ] || [ \"$policy\" = \"AppArmorProfile=unconfined\" ]; then\n      # If it\'s the first container, fail the test\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 确保启用 AppArmor 配置文件（如果适用）（自动）\"\n        echo \"     * Warn,No AppArmorProfile Found: $c\"\n        no_apparmor_containers=\"$no_apparmor_containers $c\"\n        fail=1\n        continue\n      fi\n      echo -e \"${RED}HummerError${NC}: Warn ,No AppArmorProfile Found: $c\"\n      no_apparmor_containers=\"$no_apparmor_containers $c\"\n    fi\n  done\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n\n# We went through all the containers and found none without AppArmor\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保启用 AppArmor 配置文件（如果适用）（自动）\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', '查看 Docker 容器是否以 root 运行', 1, 'MediumRisk', '查看 Docker 容器是否以 root 运行', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\n# 1. Make the loop separator be a new-line in POSIX compliant fashion\nset -f; IFS=$\'\n\'\n# Docker 检测是否已 Root 身份运行，如果是 Root 运行则不合规\nflag=0\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $containers\n    do\n      user=$(docker inspect --format \'User={{.Config.User}}\' \"$c\")\n      if [ \"$user\" = \"User=0\" ] || [ \"$user\" = \"User=root\" ] || [ \"$user\" = \"User=\" ] || [ \"$user\" = \"User=[]\" ] || [ \"$user\" = \"User=\" ]; then\n        name=$(docker inspect --format \'Name={{.Name}}\' \"$c\"|awk -F/ \'{print $2}\')\n        # If it\'s the first container, fail the test\n        echo -e \"${RED}HummerError${NC}: 容器 $name ID: $c 是以 root 运行\"\n        flag=1\n      fi\n      if [ $flag != 1 ];then\n        echo -e \"${GREEN}HummerSuccess${NC}: $c is ok\"\n      fi\n    done\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', '检测 Docker 容器是否存在特权端口', 1, 'HighRisk', '检测 Docker 容器是否存在特权端口', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 10. 检测是否映射特权端口\n\nfail=0\nprivileged_port_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  # Port format is private port -&gt; ip: public port\n  ports=$(docker port \"$c\" | awk \'{print $0}\' | cut -d \':\' -f2)\n\n  # iterate through port range (line delimited)\n  for port in $ports; do\n    if [ -n \"$port\" ] && [ \"$port\" -lt 1024 ]; then\n      # If it\'s the first container, fail the test\n      if [ $fail -eq 0 ]; then\n        echo -e \"${RED}HummerError${NC}: 检查特权端口是否在容器内运行！\"\n        echo -e \"${RED}HummerError${NC}: Privileged Port in use: $port in $c\"\n        privileged_port_containers=\"$privileged_port_containers $c:$port\"\n        fail=1\n        continue\n      fi\n      echo \"     * Privileged Port in use: $port in $c\"\n      privileged_port_containers=\"$privileged_port_containers $c:$port\"\n    fi\n  done\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器！\"\nfi\n\n# We went through all the containers and found no privileged ports\nif [ $fail -eq 0 ]; then\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到特权端口映射！\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', '检测 Docker 容器是否是特权容器', 1, 'CriticalRisk', '检测 Docker 容器是否是特权容器', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 7.确保不使用特权容器\n\n\nfail=0\nprivileged_containers=\"\"\ncontainers=$(docker ps -qa)\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n  privileged=$(docker inspect --format \'{{ .HostConfig.Privileged }}\' \"$c\")\n\n  if [ \"$privileged\" = \"true\" ]; then\n    if [ $fail -eq 0 ]; then\n      echo -e \"Ensure that privileged containers are not used (Automated)\"\n      echo -e \"${RED}HummerError${NC}: Container running in Privileged mode: $c\"\n      privileged_containers=\"$privileged_containers $c\"\n      fail=1\n      continue\n    fi\n    echo \"     * Container running in Privileged mode: $c\"\n    privileged_containers=\"$privileged_containers $c\"\n  fi\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: Ensure that privileged containers are not used (Automated)\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', '查看 Docker 镜像是否使用了 update 命令', 1, 'LowRisk', '查看 Docker 镜像是否使用了 update 命令', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\n\n#检查 Dockerfile,如果检测到有 update 构建历史，则为不合格，可以使用 no-cache\nfail=0\nimages=$(docker images -qa)\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nif [ -n \"$images\" ];then\n  for img in $images\ndo\n    if docker history \"$img\" 2&gt;/dev/null | grep -e \"update\" &gt;/dev/null 2&gt;&1; then\n      if [ $fail -eq 0 ]; then\n        fail=1\n        echo -e \"Info：check\"\n      fi\n      imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2&gt;/dev/null)\n      if ! [ \"$imgName\" = \'[]\' ]; then\n        echo -e \"${RED}HummerError${NC}: Update instruction found: $imgName\"\n        update_images=\"$update_images $imgName\"\n      fi\n    fi\ndone\nelse\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image\"\n  exit 0\nfi\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: PAAS\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', '检测 Docker 镜像是否配置 healthcheck', 1, 'LowRisk', '检测 Docker 镜像是否配置 healthcheck', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 2. 检测 Docker Image 是否配置 healthcheck，如果没有配置则是不合格\nflag=0\nimages=$(docker images -qa)\n\nif [ -n \"$images\" ];then\n  for img in $images\n  do\n    if docker inspect --format=\'{{.Config.Healthcheck}}\' \"$img\" 2&gt;/dev/null | grep -e \"\" &gt;/dev/null 2&gt;&1; then\n      if [ $flag -eq 0 ]; then\n        flag=1\n      fi\n      imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2&gt;/dev/null)\n      if ! [ \"$imgName\" = \'[]\' ]; then\n        echo -e \"${RED}HummerError${NC}: No Healthcheck found: $imgName\"\n        no_health_images=\"$no_health_images $imgName\"\n      else\n        echo -e \"${RED}HummerError${NC}: No Healthcheck found: $img\"\n        no_health_images=\"$no_health_images $img\"\n      fi\n    fi\n  done\nelse\n  echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image!\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', '检测 Docker 是否挂载敏感文件系统', 1, 'HighRisk', '检测 Docker 是否挂载敏感文件系统', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\nsensitive_dirs=\'/\n/boot\n/dev\n/etc\n/lib\n/proc\n/sys\n/usr\'\nfail=0\nsensitive_mount_containers=\"\"\nif [ -n \"$containers\" ];then\n  for c in $(docker ps -qa); do\n    volumes=$(docker inspect --format \'{{ .Mounts }}\' \"$c\")\n    if docker inspect --format \'{{ .VolumesRW }}\' \"$c\" 2&gt;/dev/null 1&gt;&2; then\n      volumes=$(docker inspect --format \'{{ .VolumesRW }}\' \"$c\")\n    fi\n    # Go over each directory in sensitive dir and see if they exist in the volumes\n    for v in $sensitive_dirs; do\n      sensitive=0\n      if echo \"$volumes\" | grep -e \"{.*\\s$v\\s.*true\\s.*}\" 2&gt;/tmp/null 1&gt;&2; then\n        sensitive=1\n      fi\n      if [ $sensitive -eq 1 ]; then\n        # If it\'s the first container, fail the test\n        if [ $fail -eq 0 ]; then\n          echo -e \"${RED}HummerError${NC}: Sensitive directory $v mounted in: $c\"\n          fail=1\n          continue\n        fi\n        echo \"     * Sensitive directory $v mounted in: $c\"\n        sensitive_mount_containers=\"$sensitive_mount_containers $c:$v\"\n      fi\n  done\ndone\nelse\n  echo -e  \"${GREEN}HummerSuccess${NC}: 未检测到运行中的 Docker 容器\"\nfi\n# We went through all the containers and found none with sensitive mounts\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保敏感的文件系统没有挂载到容器里面\"\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');
INSERT INTO `server_rule` (`id`, `name`, `status`, `severity`, `description`, `script`, `parameter`, `last_modified`, `flag`, `type`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', '检测 DockerFile 是否使用 ADD', 1, 'CriticalRisk', '检测 DockerFile 是否使用 ADD', '#!/usr/bin/env bash\n\ndocker -v &gt; /dev/null 2&gt;&1 || echo -e  \"${GREEN}HummerSuccess${NC}: 检测到 Docker 未安装\"\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nNC=\'\\033[0m\'\n\n# 4.检测 Dockerfile 中使用的是 COPY 而不是 ADD，如果使用 URL ADD需要特色处理\nfail=0\nadd_images=\"\"\nimages=$(docker images -qa)\n\nif [ -n \"$images\" ];then\n  for img in $images\n    do\n      if docker history --format \"{{ .CreatedBy }}\" --no-trunc \"$img\" | \\\n        sed \'$d\' | grep -q \'ADD\'; then\n        if [ $fail -eq 0 ]; then\n          fail=1\n          echo -e \"${RED}HummerError${NC}: 确保在 Dockerfiles 中使用 COPY 而不是 ADD（手动)\"\n        fi\n        imgName=$(docker inspect --format=\'{{.RepoTags}}\' \"$img\" 2&gt;/dev/null)\n        if ! [ \"$imgName\" = \'[]\' ]; then\n          echo -e \"     * ADD in image history: $imgName\"\n          add_images=\"$add_images $imgName\"\n        fi\n      fi\n    done\n  else\n    echo -e \"${GREEN}HummerSuccess${NC}: 未检测到 Docker image\"\n    exit 0\nfi\n\nif [ $fail -eq 0 ]; then\n  echo -e \"${GREEN}HummerSuccess${NC}: 确保在 Dockerfiles 中使用 COPY 而不是 ADD（手动)\"\n  return\nfi', '[]', concat(unix_timestamp(now()), '004'), 1, 'linux');

INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('720a42e7-f84d-45fe-8b2d-2d186927565f', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('5d1ceb92-4a4d-4cd4-886c-f3be25bcd88e', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('63e967d3-f298-4cd5-aede-07fd1c620e7c', 'tagging');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('9880ff52-eb8b-4f62-bd5d-aa3de404737f', 'server');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('69489dc0-23df-4d71-8d79-98f229b2c65d', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f60e57e8-d1f5-4e65-b512-16c7d899d094', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('e5f9e358-7073-4f1c-8a39-9ad4a95251ba', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('51fbb16b-8ddd-459e-a923-241551503137', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('f227b3e6-a7f9-4f3f-b754-426255255f69', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('8d55cfc5-ca80-4e34-8abb-81d796eb3516', 'safety');
INSERT INTO `rule_tag_mapping` (`rule_id`, `tag_key`) VALUES ('50269479-4669-4819-a702-1a4e1f8d22cd', 'safety');
